From 99ea668ab2ac650b6e82e5dc837602535c4882cf Mon Sep 17 00:00:00 2001
From: Julien Marrec <julien.marrec@gmail.com>
Date: Tue, 19 May 2020 15:54:51 +0200
Subject: [PATCH] Repatch like current develop

---
 .../valijson/valijson/validation_visitor.hpp  | 57 ++++++++++++++-----
 1 file changed, 44 insertions(+), 13 deletions(-)
 mode change 100755 => 100644 third_party/valijson/valijson/validation_visitor.hpp

diff --git a/third_party/valijson/valijson/validation_visitor.hpp b/third_party/valijson/valijson/validation_visitor.hpp
old mode 100755
new mode 100644
index 54bc78f73..96cd04c2c
--- a/third_party/valijson/valijson/validation_visitor.hpp
+++ b/third_party/valijson/valijson/validation_visitor.hpp
@@ -2,7 +2,8 @@

 #include <cmath>
 #include <string>
-#include <regex>
+// #include <regex>
+#include "re2/re2.h"

 #include <valijson/constraints/concrete_constraints.hpp>
 #include <valijson/constraints/constraint_visitor.hpp>
@@ -228,7 +229,7 @@ public:
         if (numValidated == 0) {
             if (results) {
                 results->pushError(context,
-                        "Failed to match against any enum values.");
+                        "\"" + target.asString() + "\" - " + "Failed to match against any enum values.");
             }

             return false;
@@ -368,7 +369,7 @@ public:
         if (constraint.getExclusiveMaximum()) {
             if (target.asDouble() >= maximum) {
                 if (results) {
-                    results->pushError(context, "Expected number less than " +
+                    results->pushError(context, "\"" + target.asString() + "\" - " + "Expected number less than " +
                             std::to_string(maximum));
                 }

@@ -378,7 +379,7 @@ public:
         } else if (target.asDouble() > maximum) {
             if (results) {
                 results->pushError(context,
-                        "Expected number less than or equal to " +
+                        "\"" + target.asString() + "\" - " + "Expected number less than or equal to " +
                         std::to_string(maximum));
             }

@@ -492,7 +493,7 @@ public:
             if (target.asDouble() <= minimum) {
                 if (results) {
                     results->pushError(context,
-                        "Expected number greater than " +
+						"\"" + target.asString() + "\" - " + "Expected number greater than " +
                         std::to_string(minimum));
                 }

@@ -501,7 +502,7 @@ public:
         } else if (target.asDouble() < minimum) {
             if (results) {
                 results->pushError(context,
-                        "Expected number greater than or equal to " +
+                        "\"" + target.asString() + "\" - " + "Expected number greater than or equal to " +
                         std::to_string(minimum));
             }

@@ -784,10 +785,10 @@ public:
             return true;
         }

-        const std::regex patternRegex(
-                constraint.getPattern<std::string::allocator_type>());
+        // const std::regex patternRegex(
+        //         constraint.getPattern<std::string::allocator_type>());

-        if (!std::regex_search(target.asString(), patternRegex)) {
+        if (!RE2::FullMatch(target.asString(), constraint.getPattern<std::string::allocator_type>())) {
             if (results) {
                 results->pushError(context,
                         "Failed to match regex specified by 'pattern' "
@@ -1032,8 +1033,37 @@ public:
             if (numValidated > 0) {
                 return true;
             } else if (results) {
-                results->pushError(context,
-                        "Value type not permitted by 'type' constraint.");
+                std::string type;
+                bool output_target = true;
+                if (target.isNumber()) {
+                    type = "number";
+                } else if(target.isString()) {
+                    type = "string";
+                } else if(target.isArray()) {
+                    type = "array";
+                    output_target = false;
+                } else if(target.isObject()) {
+                    type = "object";
+                    output_target = false;
+                } else if(target.isInteger()) {
+                    type = "integer";
+                } else if(target.isBool()) {
+                    type = "boolean";
+                } else if(target.isNull()) {
+                    type = "null";
+                } else {
+                    type = "unknown type";
+                    output_target = false;
+                }
+
+                if (output_target) {
+                    results->pushError(context,
+                                       "Value type \"" + type + "\" for input \"" + target.asString() + "\" not permitted by 'type' constraint.");
+                } else {
+                    results->pushError(context,
+                                       "Value type \"" + type + "\" not permitted by 'type' constraint.");
+                }
+
             }
         }

@@ -1422,14 +1452,15 @@ private:
             // PropertiesConstraint. does std::regex currently support
             // custom allocators? Anyway, this isn't an issue here, because Valijson's
             // JSON Scheme validator does not yet support custom allocators.
-            const std::regex r(patternPropertyStr);
+            // const std::regex r(patternPropertyStr);
+            auto r = std::unique_ptr< RE2 >( new RE2( patternPropertyStr ) );

             bool matchFound = false;

             // Recursively validate all matching properties
             typedef const typename AdapterType::ObjectMember ObjectMember;
             for (const ObjectMember m : object) {
-                if (std::regex_search(m.first, r)) {
+                if (RE2::FullMatch(m.first, *r)) {
                     matchFound = true;
                     if (propertiesMatched) {
                         propertiesMatched->insert(m.first);
--
2.26.2
