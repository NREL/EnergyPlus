#include <memory>
#include <gtest/gtest.h>

#include "WCESpectralAveraging.hpp"
#include "WCEMultiLayerOptics.hpp"
#include "WCESingleLayerOptics.hpp"
#include "WCECommon.hpp"

using namespace SingleLayerOptics;
using namespace FenestrationCommon;
using namespace SpectralAveraging;
using namespace MultiLayerOptics;

class EquivalentSpecularLayer_NFRC2600 : public testing::Test
{
private:
    std::shared_ptr<CMultiPaneSpecular> m_Layer;

    CSeries loadSolarRadiationFile()
    {
        // Full ASTM E891-87 Table 1 (Solar radiation)
        CSeries aSolarRadiation(
          {{0.3000, 0.0},    {0.3050, 3.4},    {0.3100, 15.6},   {0.3150, 41.1},   {0.3200, 71.2},
           {0.3250, 100.2},  {0.3300, 152.4},  {0.3350, 155.6},  {0.3400, 179.4},  {0.3450, 186.7},
           {0.3500, 212.0},  {0.3600, 240.5},  {0.3700, 324.0},  {0.3800, 362.4},  {0.3900, 381.7},
           {0.4000, 556.0},  {0.4100, 656.3},  {0.4200, 690.8},  {0.4300, 641.9},  {0.4400, 798.5},
           {0.4500, 956.6},  {0.4600, 990.0},  {0.4700, 998.0},  {0.4800, 1046.1}, {0.4900, 1005.1},
           {0.5000, 1026.7}, {0.5100, 1066.7}, {0.5200, 1011.5}, {0.5300, 1084.9}, {0.5400, 1082.4},
           {0.5500, 1102.2}, {0.5700, 1087.4}, {0.5900, 1024.3}, {0.6100, 1088.8}, {0.6300, 1062.1},
           {0.6500, 1061.7}, {0.6700, 1046.2}, {0.6900, 859.2},  {0.7100, 1002.4}, {0.7180, 816.9},
           {0.7244, 842.8},  {0.7400, 971.0},  {0.7525, 956.3},  {0.7575, 942.2},  {0.7625, 524.8},
           {0.7675, 830.7},  {0.7800, 908.9},  {0.8000, 873.4},  {0.8160, 712.0},  {0.8237, 660.2},
           {0.8315, 765.5},  {0.8400, 799.8},  {0.8600, 815.2},  {0.8800, 778.3},  {0.9050, 630.4},
           {0.9150, 565.2},  {0.9250, 586.4},  {0.9300, 348.1},  {0.9370, 224.2},  {0.9480, 271.4},
           {0.9650, 451.2},  {0.9800, 549.7},  {0.9935, 630.1},  {1.0400, 582.9},  {1.0700, 539.7},
           {1.1000, 366.2},  {1.1200, 98.1},   {1.1300, 169.5},  {1.1370, 118.7},  {1.1610, 301.9},
           {1.1800, 406.8},  {1.2000, 375.2},  {1.2350, 423.6},  {1.2900, 365.7},  {1.3200, 223.4},
           {1.3500, 30.1},   {1.3950, 1.4},    {1.4425, 51.6},   {1.4625, 97.0},   {1.4770, 97.3},
           {1.4970, 167.1},  {1.5200, 239.3},  {1.5390, 248.8},  {1.5580, 249.3},  {1.5780, 222.3},
           {1.5920, 227.3},  {1.6100, 210.5},  {1.6300, 224.7},  {1.6460, 215.9},  {1.6780, 202.8},
           {1.7400, 158.2},  {1.8000, 28.6},   {1.8600, 1.8},    {1.9200, 1.1},    {1.9600, 19.7},
           {1.9850, 84.9},   {2.0050, 25.0},   {2.0350, 92.5},   {2.0650, 56.3},   {2.1000, 82.7},
           {2.1480, 76.2},   {2.1980, 66.4},   {2.2700, 65.0},   {2.3600, 57.6},   {2.4500, 19.8},
           {2.4940, 17.0},   {2.5370, 3.0},    {2.9410, 4.0},    {2.9730, 7.0},    {3.0050, 6.0},
           {3.0560, 3.0},    {3.1320, 5.0},    {3.1560, 18.0},   {3.2040, 1.2},    {3.2450, 3.0},
           {3.3170, 12.0},   {3.3440, 3.0},    {3.4500, 12.2},   {3.5730, 11.0},   {3.7650, 9.0},
           {4.0450, 6.9}

          });

        return aSolarRadiation;
    }

    std::shared_ptr<CSpectralSampleData> loadSampleData_NFRC_2600()
    {
        auto aMeasurements = CSpectralSampleData::create(
          {{0.3, 0.022, 0.047, 0.047},   {0.305, 0.024, 0.047, 0.048}, {0.31, 0.032, 0.048, 0.048},
           {0.315, 0.04, 0.048, 0.048},  {0.32, 0.042, 0.047, 0.047},  {0.325, 0.04, 0.045, 0.045},
           {0.33, 0.037, 0.044, 0.045},  {0.335, 0.032, 0.045, 0.045}, {0.34, 0.031, 0.045, 0.045},
           {0.345, 0.034, 0.045, 0.045}, {0.35, 0.046, 0.045, 0.045},  {0.355, 0.069, 0.045, 0.045},
           {0.36, 0.11, 0.046, 0.045},   {0.365, 0.186, 0.046, 0.046}, {0.37, 0.321, 0.049, 0.049},
           {0.375, 0.509, 0.057, 0.057}, {0.38, 0.699, 0.067, 0.067},  {0.385, 0.819, 0.075, 0.075},
           {0.39, 0.881, 0.08, 0.079},   {0.395, 0.904, 0.081, 0.081}, {0.4, 0.913, 0.081, 0.081},
           {0.405, 0.917, 0.081, 0.08},  {0.41, 0.918, 0.081, 0.08},   {0.415, 0.918, 0.08, 0.08},
           {0.42, 0.919, 0.079, 0.079},  {0.425, 0.917, 0.079, 0.079}, {0.43, 0.92, 0.079, 0.079},
           {0.435, 0.919, 0.079, 0.078}, {0.44, 0.922, 0.078, 0.078},  {0.445, 0.922, 0.078, 0.078},
           {0.45, 0.921, 0.077, 0.077},  {0.455, 0.921, 0.077, 0.077}, {0.46, 0.921, 0.077, 0.076},
           {0.465, 0.923, 0.077, 0.076}, {0.47, 0.923, 0.076, 0.076},  {0.475, 0.922, 0.076, 0.076},
           {0.48, 0.923, 0.076, 0.076},  {0.485, 0.922, 0.076, 0.076}, {0.49, 0.923, 0.076, 0.075},
           {0.495, 0.924, 0.075, 0.075}, {0.5, 0.922, 0.075, 0.075},   {0.505, 0.922, 0.075, 0.075},
           {0.51, 0.923, 0.075, 0.074},  {0.515, 0.922, 0.074, 0.074}, {0.52, 0.922, 0.074, 0.074},
           {0.525, 0.922, 0.074, 0.074}, {0.53, 0.922, 0.074, 0.074},  {0.535, 0.923, 0.074, 0.074},
           {0.54, 0.923, 0.074, 0.074},  {0.545, 0.923, 0.074, 0.073}, {0.55, 0.923, 0.074, 0.074},
           {0.555, 0.923, 0.074, 0.073}, {0.56, 0.923, 0.073, 0.073},  {0.565, 0.923, 0.073, 0.073},
           {0.57, 0.923, 0.073, 0.073},  {0.575, 0.922, 0.073, 0.073}, {0.58, 0.923, 0.073, 0.073},
           {0.585, 0.923, 0.073, 0.073}, {0.59, 0.924, 0.073, 0.073},  {0.595, 0.924, 0.073, 0.073},
           {0.6, 0.923, 0.073, 0.073},   {0.605, 0.923, 0.073, 0.072}, {0.61, 0.924, 0.073, 0.072},
           {0.615, 0.923, 0.072, 0.072}, {0.62, 0.924, 0.072, 0.072},  {0.625, 0.925, 0.072, 0.072},
           {0.63, 0.924, 0.072, 0.072},  {0.635, 0.925, 0.072, 0.072}, {0.64, 0.923, 0.072, 0.072},
           {0.645, 0.923, 0.072, 0.072}, {0.65, 0.926, 0.072, 0.072},  {0.655, 0.924, 0.071, 0.072},
           {0.66, 0.924, 0.072, 0.071},  {0.665, 0.925, 0.071, 0.071}, {0.67, 0.925, 0.071, 0.072},
           {0.675, 0.924, 0.072, 0.071}, {0.68, 0.924, 0.071, 0.071},  {0.685, 0.925, 0.072, 0.072},
           {0.69, 0.924, 0.071, 0.071},  {0.695, 0.925, 0.071, 0.071}, {0.7, 0.926, 0.071, 0.071},
           {0.705, 0.924, 0.071, 0.071}, {0.71, 0.927, 0.071, 0.071},  {0.715, 0.924, 0.07, 0.071},
           {0.72, 0.924, 0.071, 0.071},  {0.725, 0.925, 0.071, 0.071}, {0.73, 0.924, 0.071, 0.07},
           {0.735, 0.922, 0.071, 0.07},  {0.74, 0.922, 0.07, 0.07},    {0.745, 0.923, 0.071, 0.071},
           {0.75, 0.924, 0.071, 0.07},   {0.755, 0.927, 0.07, 0.07},   {0.76, 0.926, 0.071, 0.07},
           {0.765, 0.926, 0.07, 0.07},   {0.77, 0.925, 0.07, 0.07},    {0.775, 0.925, 0.07, 0.07},
           {0.78, 0.927, 0.07, 0.07},    {0.785, 0.927, 0.07, 0.07},   {0.79, 0.925, 0.07, 0.07},
           {0.795, 0.927, 0.07, 0.07},   {0.8, 0.923, 0.071, 0.071},   {0.805, 0.924, 0.07, 0.07},
           {0.81, 0.925, 0.07, 0.071},   {0.815, 0.923, 0.07, 0.071},  {0.82, 0.928, 0.071, 0.071},
           {0.825, 0.928, 0.07, 0.07},   {0.83, 0.927, 0.071, 0.071},  {0.835, 0.923, 0.07, 0.07},
           {0.84, 0.927, 0.071, 0.07},   {0.845, 0.919, 0.071, 0.071}, {0.85, 0.925, 0.071, 0.071},
           {0.855, 0.924, 0.07, 0.071},  {0.86, 0.931, 0.069, 0.069},  {0.865, 0.927, 0.073, 0.073},
           {0.87, 0.92, 0.077, 0.077},   {0.875, 0.92, 0.08, 0.078},   {0.88, 0.916, 0.078, 0.079},
           {0.885, 0.914, 0.079, 0.078}, {0.89, 0.911, 0.078, 0.075},  {0.895, 0.912, 0.078, 0.079},
           {0.9, 0.912, 0.079, 0.077},   {0.905, 0.915, 0.078, 0.079}, {0.91, 0.914, 0.077, 0.077},
           {0.915, 0.917, 0.077, 0.074}, {0.92, 0.92, 0.074, 0.074},   {0.925, 0.922, 0.075, 0.073},
           {0.93, 0.923, 0.074, 0.075},  {0.935, 0.924, 0.075, 0.075}, {0.94, 0.925, 0.074, 0.075},
           {0.945, 0.924, 0.074, 0.075}, {0.95, 0.925, 0.075, 0.073},  {0.955, 0.926, 0.074, 0.074},
           {0.96, 0.924, 0.075, 0.075},  {0.965, 0.925, 0.075, 0.075}, {0.97, 0.923, 0.074, 0.075},
           {0.975, 0.921, 0.075, 0.074}, {0.98, 0.92, 0.074, 0.074},   {0.985, 0.919, 0.074, 0.074},
           {0.99, 0.918, 0.075, 0.074},  {0.995, 0.916, 0.074, 0.074}, {1.0, 0.916, 0.074, 0.074},
           {1.005, 0.915, 0.074, 0.075}, {1.01, 0.916, 0.073, 0.074},  {1.015, 0.916, 0.073, 0.074},
           {1.02, 0.919, 0.074, 0.074},  {1.025, 0.917, 0.075, 0.074}, {1.03, 0.917, 0.074, 0.073},
           {1.035, 0.917, 0.075, 0.074}, {1.04, 0.919, 0.074, 0.074},  {1.045, 0.921, 0.074, 0.075},
           {1.05, 0.922, 0.075, 0.075},  {1.055, 0.923, 0.074, 0.075}, {1.06, 0.924, 0.074, 0.075},
           {1.065, 0.924, 0.076, 0.075}, {1.07, 0.925, 0.075, 0.075},  {1.075, 0.926, 0.074, 0.074},
           {1.08, 0.924, 0.075, 0.075},  {1.085, 0.925, 0.074, 0.075}, {1.09, 0.925, 0.075, 0.074},
           {1.095, 0.923, 0.074, 0.075}, {1.1, 0.921, 0.074, 0.075},   {1.105, 0.918, 0.075, 0.075},
           {1.11, 0.912, 0.074, 0.075},  {1.115, 0.906, 0.074, 0.073}, {1.12, 0.895, 0.073, 0.073},
           {1.125, 0.881, 0.072, 0.071}, {1.13, 0.865, 0.07, 0.071},   {1.135, 0.851, 0.07, 0.069},
           {1.14, 0.836, 0.069, 0.069},  {1.145, 0.823, 0.069, 0.068}, {1.15, 0.809, 0.066, 0.067},
           {1.155, 0.789, 0.065, 0.065}, {1.16, 0.766, 0.064, 0.063},  {1.165, 0.749, 0.062, 0.061},
           {1.17, 0.738, 0.062, 0.062},  {1.175, 0.737, 0.063, 0.062}, {1.18, 0.752, 0.063, 0.063},
           {1.185, 0.78, 0.064, 0.063},  {1.19, 0.806, 0.064, 0.063},  {1.195, 0.826, 0.067, 0.068},
           {1.2, 0.844, 0.071, 0.069},   {1.205, 0.863, 0.071, 0.072}, {1.21, 0.879, 0.071, 0.072},
           {1.215, 0.891, 0.073, 0.073}, {1.22, 0.897, 0.073, 0.074},  {1.225, 0.903, 0.073, 0.074},
           {1.23, 0.906, 0.074, 0.074},  {1.235, 0.909, 0.076, 0.073}, {1.24, 0.912, 0.074, 0.074},
           {1.245, 0.914, 0.075, 0.074}, {1.25, 0.916, 0.076, 0.075},  {1.255, 0.916, 0.073, 0.075},
           {1.26, 0.918, 0.075, 0.075},  {1.265, 0.918, 0.075, 0.075}, {1.27, 0.918, 0.075, 0.075},
           {1.275, 0.919, 0.075, 0.076}, {1.28, 0.918, 0.074, 0.074},  {1.285, 0.918, 0.076, 0.074},
           {1.29, 0.918, 0.074, 0.075},  {1.295, 0.917, 0.075, 0.075}, {1.3, 0.917, 0.076, 0.075},
           {1.305, 0.916, 0.075, 0.075}, {1.31, 0.913, 0.075, 0.073},  {1.315, 0.912, 0.075, 0.073},
           {1.32, 0.908, 0.075, 0.074},  {1.325, 0.899, 0.074, 0.074}, {1.33, 0.879, 0.073, 0.072},
           {1.335, 0.845, 0.07, 0.07},   {1.34, 0.801, 0.066, 0.066},  {1.345, 0.769, 0.065, 0.064},
           {1.35, 0.751, 0.063, 0.063},  {1.355, 0.74, 0.061, 0.062},  {1.36, 0.727, 0.061, 0.06},
           {1.365, 0.71, 0.062, 0.062},  {1.37, 0.699, 0.06, 0.06},    {1.375, 0.699, 0.06, 0.06},
           {1.38, 0.704, 0.061, 0.06},   {1.385, 0.706, 0.061, 0.06},  {1.39, 0.708, 0.061, 0.061},
           {1.395, 0.719, 0.06, 0.06},   {1.4, 0.734, 0.063, 0.063},   {1.405, 0.738, 0.062, 0.063},
           {1.41, 0.74, 0.063, 0.062},   {1.415, 0.737, 0.063, 0.063}, {1.42, 0.735, 0.062, 0.062},
           {1.425, 0.739, 0.064, 0.062}, {1.43, 0.746, 0.063, 0.063},  {1.435, 0.758, 0.063, 0.063},
           {1.44, 0.772, 0.064, 0.064},  {1.445, 0.789, 0.066, 0.066}, {1.45, 0.81, 0.068, 0.067},
           {1.455, 0.829, 0.07, 0.069},  {1.46, 0.838, 0.069, 0.07},   {1.465, 0.843, 0.07, 0.07},
           {1.47, 0.849, 0.07, 0.07},    {1.475, 0.856, 0.071, 0.07},  {1.48, 0.861, 0.071, 0.07},
           {1.485, 0.867, 0.071, 0.072}, {1.49, 0.872, 0.072, 0.071},  {1.495, 0.876, 0.074, 0.072},
           {1.5, 0.88, 0.073, 0.073},    {1.505, 0.883, 0.073, 0.073}, {1.51, 0.885, 0.073, 0.073},
           {1.515, 0.887, 0.073, 0.075}, {1.52, 0.889, 0.073, 0.076},  {1.525, 0.89, 0.074, 0.074},
           {1.53, 0.89, 0.074, 0.073},   {1.535, 0.89, 0.075, 0.074},  {1.54, 0.889, 0.074, 0.074},
           {1.545, 0.888, 0.074, 0.074}, {1.55, 0.887, 0.074, 0.075},  {1.555, 0.885, 0.073, 0.074},
           {1.56, 0.882, 0.073, 0.072},  {1.565, 0.878, 0.073, 0.072}, {1.57, 0.875, 0.072, 0.073},
           {1.575, 0.873, 0.073, 0.072}, {1.58, 0.868, 0.073, 0.072},  {1.585, 0.863, 0.072, 0.072},
           {1.59, 0.858, 0.073, 0.072},  {1.595, 0.852, 0.072, 0.071}, {1.6, 0.845, 0.071, 0.071},
           {1.605, 0.837, 0.07, 0.07},   {1.61, 0.825, 0.069, 0.07},   {1.615, 0.813, 0.069, 0.068},
           {1.62, 0.802, 0.068, 0.067},  {1.625, 0.788, 0.067, 0.066}, {1.63, 0.775, 0.066, 0.066},
           {1.635, 0.761, 0.065, 0.064}, {1.64, 0.737, 0.063, 0.063},  {1.645, 0.694, 0.061, 0.06},
           {1.65, 0.622, 0.055, 0.056},  {1.655, 0.522, 0.05, 0.052},  {1.66, 0.419, 0.047, 0.046},
           {1.665, 0.333, 0.044, 0.043}, {1.67, 0.267, 0.041, 0.04},   {1.675, 0.223, 0.04, 0.041},
           {1.68, 0.209, 0.041, 0.039},  {1.685, 0.219, 0.04, 0.042},  {1.69, 0.243, 0.04, 0.041},
           {1.695, 0.257, 0.042, 0.041}, {1.7, 0.261, 0.041, 0.042},   {1.705, 0.262, 0.041, 0.041},
           {1.71, 0.264, 0.041, 0.04},   {1.715, 0.268, 0.041, 0.041}, {1.72, 0.272, 0.042, 0.041},
           {1.725, 0.283, 0.043, 0.041}, {1.73, 0.302, 0.043, 0.042},  {1.735, 0.328, 0.043, 0.042},
           {1.74, 0.359, 0.044, 0.044},  {1.745, 0.391, 0.044, 0.044}, {1.75, 0.424, 0.046, 0.045},
           {1.755, 0.454, 0.047, 0.047}, {1.76, 0.482, 0.05, 0.048},   {1.765, 0.501, 0.05, 0.05},
           {1.77, 0.511, 0.051, 0.05},   {1.775, 0.51, 0.049, 0.05},   {1.78, 0.51, 0.05, 0.051},
           {1.785, 0.517, 0.053, 0.053}, {1.79, 0.532, 0.053, 0.052},  {1.795, 0.554, 0.054, 0.053},
           {1.8, 0.579, 0.054, 0.053},   {1.805, 0.601, 0.054, 0.055}, {1.81, 0.62, 0.057, 0.057},
           {1.815, 0.635, 0.058, 0.056}, {1.82, 0.641, 0.057, 0.057},  {1.825, 0.646, 0.054, 0.057},
           {1.83, 0.647, 0.055, 0.056},  {1.835, 0.644, 0.056, 0.056}, {1.84, 0.642, 0.056, 0.056},
           {1.845, 0.636, 0.056, 0.056}, {1.85, 0.628, 0.056, 0.056},  {1.855, 0.623, 0.055, 0.055},
           {1.86, 0.621, 0.054, 0.055},  {1.865, 0.62, 0.055, 0.055},  {1.87, 0.62, 0.057, 0.056},
           {1.875, 0.613, 0.057, 0.055}, {1.88, 0.592, 0.056, 0.054},  {1.885, 0.559, 0.051, 0.053},
           {1.89, 0.509, 0.047, 0.049},  {1.895, 0.451, 0.045, 0.045}, {1.9, 0.397, 0.041, 0.043},
           {1.905, 0.362, 0.042, 0.042}, {1.91, 0.363, 0.042, 0.044},  {1.915, 0.398, 0.047, 0.047},
           {1.92, 0.453, 0.048, 0.05},   {1.925, 0.498, 0.052, 0.054}, {1.93, 0.524, 0.057, 0.055},
           {1.935, 0.527, 0.054, 0.057}, {1.94, 0.523, 0.054, 0.055},  {1.945, 0.518, 0.053, 0.054},
           {1.95, 0.525, 0.053, 0.053},  {1.955, 0.544, 0.053, 0.052}, {1.96, 0.571, 0.053, 0.054},
           {1.965, 0.6, 0.053, 0.055},   {1.97, 0.625, 0.057, 0.055},  {1.975, 0.641, 0.055, 0.055},
           {1.98, 0.651, 0.057, 0.056},  {1.985, 0.654, 0.056, 0.056}, {1.99, 0.655, 0.055, 0.056},
           {1.995, 0.653, 0.056, 0.055}, {2.0, 0.653, 0.056, 0.056},   {2.005, 0.652, 0.057, 0.057},
           {2.01, 0.648, 0.056, 0.057},  {2.015, 0.648, 0.056, 0.055}, {2.02, 0.646, 0.055, 0.054},
           {2.025, 0.644, 0.055, 0.056}, {2.03, 0.64, 0.054, 0.053},   {2.035, 0.635, 0.053, 0.054},
           {2.04, 0.629, 0.054, 0.055},  {2.045, 0.623, 0.054, 0.056}, {2.05, 0.615, 0.057, 0.055},
           {2.055, 0.61, 0.055, 0.054},  {2.06, 0.604, 0.054, 0.053},  {2.065, 0.595, 0.055, 0.051},
           {2.07, 0.585, 0.052, 0.05},   {2.075, 0.574, 0.05, 0.052},  {2.08, 0.551, 0.048, 0.049},
           {2.085, 0.525, 0.048, 0.049}, {2.09, 0.488, 0.047, 0.044},  {2.095, 0.441, 0.044, 0.046},
           {2.1, 0.396, 0.041, 0.044},   {2.105, 0.346, 0.042, 0.039}, {2.11, 0.316, 0.038, 0.039},
           {2.115, 0.285, 0.038, 0.043}, {2.12, 0.269, 0.04, 0.036},   {2.125, 0.25, 0.037, 0.039},
           {2.13, 0.229, 0.036, 0.035},  {2.135, 0.216, 0.039, 0.04},  {2.14, 0.218, 0.035, 0.042},
           {2.145, 0.239, 0.038, 0.04},  {2.15, 0.265, 0.041, 0.04},   {2.155, 0.283, 0.044, 0.046},
           {2.16, 0.295, 0.045, 0.039},  {2.165, 0.292, 0.044, 0.038}, {2.17, 0.285, 0.04, 0.041},
           {2.175, 0.272, 0.04, 0.041},  {2.18, 0.253, 0.042, 0.04},   {2.185, 0.231, 0.041, 0.043},
           {2.19, 0.204, 0.039, 0.037},  {2.195, 0.178, 0.037, 0.037}, {2.2, 0.147, 0.038, 0.037},
           {2.205, 0.115, 0.033, 0.04},  {2.21, 0.083, 0.039, 0.036},  {2.215, 0.05, 0.037, 0.041},
           {2.22, 0.025, 0.031, 0.039},  {2.225, 0.011, 0.033, 0.035}, {2.23, 0.002, 0.035, 0.035},
           {2.235, 0.0, 0.033, 0.037},   {2.24, 0.0, 0.037, 0.035},    {2.245, 0.0, 0.036, 0.036},
           {2.25, 0.0, 0.038, 0.038},    {2.255, 0.0, 0.039, 0.032},   {2.26, 0.0, 0.033, 0.034},
           {2.265, 0.0, 0.037, 0.041},   {2.27, 0.0, 0.035, 0.032},    {2.275, 0.0, 0.033, 0.039},
           {2.28, 0.003, 0.032, 0.036},  {2.285, 0.0, 0.038, 0.035},   {2.29, 0.0, 0.033, 0.033},
           {2.295, 0.0, 0.038, 0.037},   {2.3, 0.0, 0.033, 0.029},     {2.305, 0.002, 0.034, 0.03},
           {2.31, 0.0, 0.035, 0.037},    {2.315, 0.004, 0.04, 0.037},  {2.32, 0.002, 0.021, 0.037},
           {2.325, 0.0, 0.032, 0.04},    {2.33, 0.007, 0.035, 0.034},  {2.335, 0.004, 0.029, 0.042},
           {2.34, 0.003, 0.04, 0.029},   {2.345, 0.0, 0.032, 0.035},   {2.35, 0.0, 0.028, 0.035},
           {2.355, 0.003, 0.035, 0.035}, {2.36, 0.004, 0.048, 0.033},  {2.365, 0.0, 0.028, 0.025},
           {2.37, 0.0, 0.032, 0.025},    {2.375, 0.001, 0.037, 0.038}, {2.38, 0.002, 0.031, 0.03},
           {2.385, 0.004, 0.033, 0.028}, {2.39, 0.0, 0.025, 0.028},    {2.395, 0.0, 0.044, 0.04},
           {2.4, 0.0, 0.029, 0.032},     {2.405, 0.006, 0.039, 0.028}, {2.41, 0.007, 0.034, 0.036},
           {2.415, 0.01, 0.038, 0.049},  {2.42, 0.0, 0.027, 0.04},     {2.425, 0.0, 0.037, 0.042},
           {2.43, 0.0, 0.032, 0.038},    {2.435, 0.007, 0.02, 0.028},  {2.44, 0.001, 0.058, 0.034},
           {2.445, 0.0, 0.033, 0.044},   {2.45, 0.0, 0.034, 0.04},     {2.455, 0.018, 0.049, 0.029},
           {2.46, 0.016, 0.034, 0.021},  {2.465, 0.002, 0.037, 0.034}, {2.47, 0.0, 0.039, 0.033},
           {2.475, 0.0, 0.02, 0.042},    {2.48, 0.014, 0.027, 0.041},  {2.485, 0.003, 0.038, 0.034},
           {2.49, 0.022, 0.036, 0.045},  {2.495, 0.004, 0.025, 0.03},  {2.5, 0.0, 0.024, 0.028}});

        return aMeasurements;
    }

protected:
    virtual void SetUp()
    {
        const auto aSolarRadiation = loadSolarRadiationFile();

        double thickness = 2.4892e-3;   // [m]
        const auto aMaterial_2600 = Material::nBandMaterial(
          loadSampleData_NFRC_2600(), thickness, MaterialType::Monolithic, WavelengthRange::Solar);

        const auto layer2600 = SpecularLayer::createLayer(aMaterial_2600);

        m_Layer = CMultiPaneSpecular::create({layer2600}, loadSolarRadiationFile());
    }

public:
    std::shared_ptr<CMultiPaneSpecular> getLayer() const
    {
        return m_Layer;
    };
};

TEST_F(EquivalentSpecularLayer_NFRC2600, TestAngle0)
{
    SCOPED_TRACE("Begin Test: Specular MultiLayerOptics layer - angle = 0 deg.");

    const double angle = 0;

    CMultiPaneSpecular aLayer = *getLayer();

    const double T =
      aLayer.getPropertySimple(PropertySimple::T, Side::Front, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.853646, T, 1e-6);

    const double Rf =
      aLayer.getPropertySimple(PropertySimple::R, Side::Front, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.070509, Rf, 1e-6);

    const double Rb =
      aLayer.getPropertySimple(PropertySimple::R, Side::Back, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.070371, Rb, 1e-6);

    const double Abs1 =
      aLayer.getAbsorptanceLayer(1, Side::Front, ScatteringSimple::Direct, angle, 0);
    EXPECT_NEAR(0.075845, Abs1, 1e-6);
}

TEST_F(EquivalentSpecularLayer_NFRC2600, TestAngle10)
{
    SCOPED_TRACE("Begin Test: Specular MultiLayerOptics layer - angle = 10 deg.");

    const double angle = 10;

    CMultiPaneSpecular aLayer = *getLayer();

    const double T =
      aLayer.getPropertySimple(PropertySimple::T, Side::Front, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.853399, T, 1e-6);

    const double Rf =
      aLayer.getPropertySimple(PropertySimple::R, Side::Front, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.070521, Rf, 1e-6);

    const double Rb =
      aLayer.getPropertySimple(PropertySimple::R, Side::Back, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.070383, Rb, 1e-6);

    const double Abs1 =
      aLayer.getAbsorptanceLayer(1, Side::Front, ScatteringSimple::Direct, angle, 0);
    EXPECT_NEAR(0.076079, Abs1, 1e-6);
}

TEST_F(EquivalentSpecularLayer_NFRC2600, TestAngle20)
{
    SCOPED_TRACE("Begin Test: Specular MultiLayerOptics layer - angle = 20 deg.");

    const double angle = 20;

    CMultiPaneSpecular aLayer = *getLayer();

    const double T =
      aLayer.getPropertySimple(PropertySimple::T, Side::Front, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.852378, T, 1e-6);

    const double Rf =
      aLayer.getPropertySimple(PropertySimple::R, Side::Front, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.070860, Rf, 1e-6);

    const double Rb =
      aLayer.getPropertySimple(PropertySimple::R, Side::Back, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.070721, Rb, 1e-6);

    const double Abs1 =
      aLayer.getAbsorptanceLayer(1, Side::Front, ScatteringSimple::Direct, angle, 0);
    EXPECT_NEAR(0.076762, Abs1, 1e-6);
}

TEST_F(EquivalentSpecularLayer_NFRC2600, TestAngleHemispherical10)
{
    SCOPED_TRACE("Begin Test: Hemispherical to hemispherical with ten integration points.");

    const double minLambda = 0.3;
    const double maxLambda = 2.5;
    std::vector<double> aAngles{0, 10, 20, 30, 40, 50, 60, 70, 80, 90};

    CMultiPaneSpecular aLayer = *getLayer();

    double Tfhem =
      aLayer.getHemisphericalProperty(Side::Front, Property::T, aAngles, minLambda, maxLambda);
    EXPECT_NEAR(0.778433, Tfhem, 1e-6);

    double Tbhem =
      aLayer.getHemisphericalProperty(Side::Back, Property::T, aAngles, minLambda, maxLambda);
    EXPECT_NEAR(0.778433, Tbhem, 1e-6);

    double Rfhem =
      aLayer.getHemisphericalProperty(Side::Front, Property::R, aAngles, minLambda, maxLambda);
    EXPECT_NEAR(0.134634, Rfhem, 1e-6);

    double Rbhem =
      aLayer.getHemisphericalProperty(Side::Back, Property::R, aAngles, minLambda, maxLambda);
    EXPECT_NEAR(0.134494, Rbhem, 1e-6);

    double Abs1 = aLayer.AbsHemispherical(1, aAngles, minLambda, maxLambda);
    EXPECT_NEAR(0.076758, Abs1, 1e-6);
}
