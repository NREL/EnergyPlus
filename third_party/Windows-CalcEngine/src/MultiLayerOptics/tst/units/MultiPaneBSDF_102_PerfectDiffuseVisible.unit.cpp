#include <memory>
#include <gtest/gtest.h>

#include "WCESpectralAveraging.hpp"
#include "WCEMultiLayerOptics.hpp"
#include "WCESingleLayerOptics.hpp"
#include "WCECommon.hpp"


using namespace SingleLayerOptics;
using namespace FenestrationCommon;
using namespace SpectralAveraging;
using namespace MultiLayerOptics;

// Example on how to create multilayer BSDF from specular and venetian layers

class MultiPaneBSDF_102_PerfectDiffuse_Visible : public testing::Test
{
private:
    std::unique_ptr<CMultiPaneBSDF> m_Layer;

    CSeries loadSolarRadiationFile()
    {
        // Full ASTM E891-87 Table 1 (Solar radiation)
        CSeries aSolarRadiation(
          {{0.3, 0.0341},    {0.301, 0.36014}, {0.302, 0.68618}, {0.303, 1.01222}, {0.304, 1.33826},
           {0.305, 1.6643},  {0.306, 1.99034}, {0.307, 2.31638}, {0.308, 2.64242}, {0.309, 2.96846},
           {0.31, 3.2945},   {0.311, 4.98865}, {0.312, 6.6828},  {0.313, 8.37695}, {0.314, 10.0711},
           {0.315, 11.7652}, {0.316, 13.4594}, {0.317, 15.1535}, {0.318, 16.8477}, {0.319, 18.5418},
           {0.32, 20.236},   {0.321, 21.9177}, {0.322, 23.5995}, {0.323, 25.2812}, {0.324, 26.963},
           {0.325, 28.6447}, {0.326, 30.3265}, {0.327, 32.0082}, {0.328, 33.69},   {0.329, 35.3717},
           {0.33, 37.0535},  {0.331, 37.343},  {0.332, 37.6326}, {0.333, 37.9221}, {0.334, 38.2116},
           {0.335, 38.5011}, {0.336, 38.7907}, {0.337, 39.0802}, {0.338, 39.3697}, {0.339, 39.6593},
           {0.34, 39.9488},  {0.341, 40.4451}, {0.342, 40.9414}, {0.343, 41.4377}, {0.344, 41.934},
           {0.345, 42.4302}, {0.346, 42.9265}, {0.347, 43.4228}, {0.348, 43.9191}, {0.349, 44.4154},
           {0.35, 44.9117},  {0.351, 45.0844}, {0.352, 45.257},  {0.353, 45.4297}, {0.354, 45.6023},
           {0.355, 45.775},  {0.356, 45.9477}, {0.357, 46.1203}, {0.358, 46.293},  {0.359, 46.4656},
           {0.36, 46.6383},  {0.361, 47.1834}, {0.362, 47.7285}, {0.363, 48.2735}, {0.364, 48.8186},
           {0.365, 49.3637}, {0.366, 49.9088}, {0.367, 50.4539}, {0.368, 50.9989}, {0.369, 51.544},
           {0.37, 52.0891},  {0.371, 51.8777}, {0.372, 51.6664}, {0.373, 51.455},  {0.374, 51.2437},
           {0.375, 51.0323}, {0.376, 50.8209}, {0.377, 50.6096}, {0.378, 50.3982}, {0.379, 50.1869},
           {0.38, 49.9755},  {0.381, 50.4428}, {0.382, 50.91},   {0.383, 51.3773}, {0.384, 51.8446},
           {0.385, 52.3118}, {0.386, 52.7791}, {0.387, 53.2464}, {0.388, 53.7137}, {0.389, 54.1809},
           {0.39, 54.6482},  {0.391, 57.4589}, {0.392, 60.2695}, {0.393, 63.0802}, {0.394, 65.8909},
           {0.395, 68.7015}, {0.396, 71.5122}, {0.397, 74.3229}, {0.398, 77.1336}, {0.399, 79.9442},
           {0.4, 82.7549},   {0.401, 83.628},  {0.402, 84.5011}, {0.403, 85.3742}, {0.404, 86.2473},
           {0.405, 87.1204}, {0.406, 87.9936}, {0.407, 88.8667}, {0.408, 89.7398}, {0.409, 90.6129},
           {0.41, 91.486},   {0.411, 91.6806}, {0.412, 91.8752}, {0.413, 92.0697}, {0.414, 92.2643},
           {0.415, 92.4589}, {0.416, 92.6535}, {0.417, 92.8481}, {0.418, 93.0426}, {0.419, 93.2372},
           {0.42, 93.4318},  {0.421, 92.7568}, {0.422, 92.0819}, {0.423, 91.4069}, {0.424, 90.732},
           {0.425, 90.057},  {0.426, 89.3821}, {0.427, 88.7071}, {0.428, 88.0322}, {0.429, 87.3572},
           {0.43, 86.6823},  {0.431, 88.5006}, {0.432, 90.3188}, {0.433, 92.1371}, {0.434, 93.9554},
           {0.435, 95.7736}, {0.436, 97.5919}, {0.437, 99.4102}, {0.438, 101.228}, {0.439, 103.047},
           {0.44, 104.865},  {0.441, 106.079}, {0.442, 107.294}, {0.443, 108.508}, {0.444, 109.722},
           {0.445, 110.936}, {0.446, 112.151}, {0.447, 113.365}, {0.448, 114.579}, {0.449, 115.794},
           {0.45, 117.008},  {0.451, 117.088}, {0.452, 117.169}, {0.453, 117.249}, {0.454, 117.33},
           {0.455, 117.41},  {0.456, 117.49},  {0.457, 117.571}, {0.458, 117.651}, {0.459, 117.732},
           {0.46, 117.812},  {0.461, 117.517}, {0.462, 117.222}, {0.463, 116.927}, {0.464, 116.632},
           {0.465, 116.336}, {0.466, 116.041}, {0.467, 115.746}, {0.468, 115.451}, {0.469, 115.156},
           {0.47, 114.861},  {0.471, 114.967}, {0.472, 115.073}, {0.473, 115.18},  {0.474, 115.286},
           {0.475, 115.392}, {0.476, 115.498}, {0.477, 115.604}, {0.478, 115.711}, {0.479, 115.817},
           {0.48, 115.923},  {0.481, 115.212}, {0.482, 114.501}, {0.483, 113.789}, {0.484, 113.078},
           {0.485, 112.367}, {0.486, 111.656}, {0.487, 110.945}, {0.488, 110.233}, {0.489, 109.522},
           {0.49, 108.811},  {0.491, 108.865}, {0.492, 108.92},  {0.493, 108.974}, {0.494, 109.028},
           {0.495, 109.082}, {0.496, 109.137}, {0.497, 109.191}, {0.498, 109.245}, {0.499, 109.3},
           {0.5, 109.354},   {0.501, 109.199}, {0.502, 109.044}, {0.503, 108.888}, {0.504, 108.733},
           {0.505, 108.578}, {0.506, 108.423}, {0.507, 108.268}, {0.508, 108.112}, {0.509, 107.957},
           {0.51, 107.802},  {0.511, 107.501}, {0.512, 107.2},   {0.513, 106.898}, {0.514, 106.597},
           {0.515, 106.296}, {0.516, 105.995}, {0.517, 105.694}, {0.518, 105.392}, {0.519, 105.091},
           {0.52, 104.79},   {0.521, 105.08},  {0.522, 105.37},  {0.523, 105.66},  {0.524, 105.95},
           {0.525, 106.239}, {0.526, 106.529}, {0.527, 106.819}, {0.528, 107.109}, {0.529, 107.399},
           {0.53, 107.689},  {0.531, 107.361}, {0.532, 107.032}, {0.533, 106.704}, {0.534, 106.375},
           {0.535, 106.047}, {0.536, 105.719}, {0.537, 105.39},  {0.538, 105.062}, {0.539, 104.733},
           {0.54, 104.405},  {0.541, 104.369}, {0.542, 104.333}, {0.543, 104.297}, {0.544, 104.261},
           {0.545, 104.225}, {0.546, 104.19},  {0.547, 104.154}, {0.548, 104.118}, {0.549, 104.082},
           {0.55, 104.046},  {0.551, 103.641}, {0.552, 103.237}, {0.553, 102.832}, {0.554, 102.428},
           {0.555, 102.023}, {0.556, 101.618}, {0.557, 101.214}, {0.558, 100.809}, {0.559, 100.405},
           {0.56, 100},      {0.561, 99.6334}, {0.562, 99.2668}, {0.563, 98.9003}, {0.564, 98.5337},
           {0.565, 98.1671}, {0.566, 97.8005}, {0.567, 97.4339}, {0.568, 97.0674}, {0.569, 96.7008},
           {0.57, 96.3342},  {0.571, 96.2796}, {0.572, 96.225},  {0.573, 96.1703}, {0.574, 96.1157},
           {0.575, 96.0611}, {0.576, 96.0065}, {0.577, 95.9519}, {0.578, 95.8972}, {0.579, 95.8426},
           {0.58, 95.788},   {0.581, 95.0778}, {0.582, 94.3675}, {0.583, 93.6573}, {0.584, 92.947},
           {0.585, 92.2368}, {0.586, 91.5266}, {0.587, 90.8163}, {0.588, 90.1061}, {0.589, 89.3958},
           {0.59, 88.6856},  {0.591, 88.8177}, {0.592, 88.9497}, {0.593, 89.0818}, {0.594, 89.2138},
           {0.595, 89.3459}, {0.596, 89.478},  {0.597, 89.61},   {0.598, 89.7421}, {0.599, 89.8741},
           {0.6, 90.0062},   {0.601, 89.9655}, {0.602, 89.9248}, {0.603, 89.8841}, {0.604, 89.8434},
           {0.605, 89.8026}, {0.606, 89.7619}, {0.607, 89.7212}, {0.608, 89.6805}, {0.609, 89.6398},
           {0.61, 89.5991},  {0.611, 89.4091}, {0.612, 89.219},  {0.613, 89.029},  {0.614, 88.8389},
           {0.615, 88.6489}, {0.616, 88.4589}, {0.617, 88.2688}, {0.618, 88.0788}, {0.619, 87.8887},
           {0.62, 87.6987},  {0.621, 87.2577}, {0.622, 86.8167}, {0.623, 86.3757}, {0.624, 85.9347},
           {0.625, 85.4936}, {0.626, 85.0526}, {0.627, 84.6116}, {0.628, 84.1706}, {0.629, 83.7296},
           {0.63, 83.2886},  {0.631, 83.3297}, {0.632, 83.3707}, {0.633, 83.4118}, {0.634, 83.4528},
           {0.635, 83.4939}, {0.636, 83.535},  {0.637, 83.576},  {0.638, 83.6171}, {0.639, 83.6581},
           {0.64, 83.6992},  {0.641, 83.332},  {0.642, 82.9647}, {0.643, 82.5975}, {0.644, 82.2302},
           {0.645, 81.863},  {0.646, 81.4958}, {0.647, 81.1285}, {0.648, 80.7613}, {0.649, 80.394},
           {0.65, 80.0268},  {0.651, 80.0456}, {0.652, 80.0644}, {0.653, 80.0831}, {0.654, 80.1019},
           {0.655, 80.1207}, {0.656, 80.1395}, {0.657, 80.1583}, {0.658, 80.177},  {0.659, 80.1958},
           {0.66, 80.2146},  {0.661, 80.4209}, {0.662, 80.6272}, {0.663, 80.8336}, {0.664, 81.0399},
           {0.665, 81.2462}, {0.666, 81.4525}, {0.667, 81.6588}, {0.668, 81.8652}, {0.669, 82.0715},
           {0.67, 82.2778},  {0.671, 81.8784}, {0.672, 81.4791}, {0.673, 81.0797}, {0.674, 80.6804},
           {0.675, 80.281},  {0.676, 79.8816}, {0.677, 79.4823}, {0.678, 79.0829}, {0.679, 78.6836},
           {0.68, 78.2842},  {0.681, 77.4279}, {0.682, 76.5716}, {0.683, 75.7153}, {0.684, 74.859},
           {0.685, 74.0027}, {0.686, 73.1465}, {0.687, 72.2902}, {0.688, 71.4339}, {0.689, 70.5776},
           {0.69, 69.7213},  {0.691, 69.9101}, {0.692, 70.0989}, {0.693, 70.2876}, {0.694, 70.4764},
           {0.695, 70.6652}, {0.696, 70.854},  {0.697, 71.0428}, {0.698, 71.2315}, {0.699, 71.4203},
           {0.7, 71.6091},   {0.701, 71.8831}, {0.702, 72.1571}, {0.703, 72.4311}, {0.704, 72.7051},
           {0.705, 72.979},  {0.706, 73.253},  {0.707, 73.527},  {0.708, 73.801},  {0.709, 74.075},
           {0.71, 74.349},   {0.711, 73.0745}, {0.712, 71.8},    {0.713, 70.5255}, {0.714, 69.251},
           {0.715, 67.9765}, {0.716, 66.702},  {0.717, 65.4275}, {0.718, 64.153},  {0.719, 62.8785},
           {0.72, 61.604},   {0.721, 62.4322}, {0.722, 63.2603}, {0.723, 64.0885}, {0.724, 64.9166},
           {0.725, 65.7448}, {0.726, 66.573},  {0.727, 67.4011}, {0.728, 68.2293}, {0.729, 69.0574},
           {0.73, 69.8856},  {0.731, 70.4057}, {0.732, 70.9259}, {0.733, 71.446},  {0.734, 71.9662},
           {0.735, 72.4863}, {0.736, 73.0064}, {0.737, 73.5266}, {0.738, 74.0467}, {0.739, 74.5669},
           {0.74, 75.087},   {0.741, 73.9376}, {0.742, 72.7881}, {0.743, 71.6387}, {0.744, 70.4893},
           {0.745, 69.3398}, {0.746, 68.1904}, {0.747, 67.041},  {0.748, 65.8916}, {0.749, 64.7421},
           {0.75, 63.5927},  {0.751, 61.8752}, {0.752, 60.1578}, {0.753, 58.4403}, {0.754, 56.7229},
           {0.755, 55.0054}, {0.756, 53.288},  {0.757, 51.5705}, {0.758, 49.8531}, {0.759, 48.1356},
           {0.76, 46.4182},  {0.761, 48.4569}, {0.762, 50.4956}, {0.763, 52.5344}, {0.764, 54.5731},
           {0.765, 56.6118}, {0.766, 58.6505}, {0.767, 60.6892}, {0.768, 62.728},  {0.769, 64.7667},
           {0.77, 66.8054},  {0.771, 66.4631}, {0.772, 66.1209}, {0.773, 65.7786}, {0.774, 65.4364},
           {0.775, 65.0941}, {0.776, 64.7518}, {0.777, 64.4096}, {0.778, 64.0673}, {0.779, 63.7251},
           {0.78, 63.3828},  {0.781, 63.4749}, {0.782, 63.567},  {0.783, 63.6592}, {0.784, 63.7513},
           {0.785, 63.8434}, {0.786, 63.9355}, {0.787, 64.0276}, {0.788, 64.1198}, {0.789, 64.2119},
           {0.79, 64.304},   {0.791, 63.8188}, {0.792, 63.3336}, {0.793, 62.8484}, {0.794, 62.3632},
           {0.795, 61.8779}, {0.796, 61.3927}, {0.797, 60.9075}, {0.798, 60.4223}, {0.799, 59.9371},
           {0.8, 59.4519},   {0.801, 58.7026}, {0.802, 57.9533}, {0.803, 57.204},  {0.804, 56.4547},
           {0.805, 55.7054}, {0.806, 54.9562}, {0.807, 54.2069}, {0.808, 53.4576}, {0.809, 52.7083},
           {0.81, 51.959},   {0.811, 52.5072}, {0.812, 53.0553}, {0.813, 53.6035}, {0.814, 54.1516},
           {0.815, 54.6998}, {0.816, 55.248},  {0.817, 55.7961}, {0.818, 56.3443}, {0.819, 56.8924},
           {0.82, 57.4406},  {0.821, 57.7278}, {0.822, 58.015},  {0.823, 58.3022}, {0.824, 58.5894},
           {0.825, 58.8765}, {0.826, 59.1637}, {0.827, 59.4509}, {0.828, 59.7381}, {0.829, 60.0253},
           {0.83, 60.3125}

          });

        return aSolarRadiation;
    }

    CSeries getDetectorData() const
    {
        CSeries detectorData(std::initializer_list<std::pair<double, double>>({

          {0.38, 0},       {0.385, 0.0001}, {0.39, 0.0001},  {0.395, 0.0002}, {0.4, 0.0004},
          {0.405, 0.0006}, {0.41, 0.0012},  {0.415, 0.0022}, {0.42, 0.004},   {0.425, 0.0073},
          {0.43, 0.0116},  {0.435, 0.0168}, {0.44, 0.023},   {0.445, 0.0298}, {0.45, 0.038},
          {0.455, 0.048},  {0.46, 0.06},    {0.465, 0.0739}, {0.47, 0.091},   {0.475, 0.1126},
          {0.48, 0.139},   {0.485, 0.1693}, {0.49, 0.208},   {0.495, 0.2586}, {0.5, 0.323},
          {0.505, 0.4073}, {0.51, 0.503},   {0.515, 0.6082}, {0.52, 0.71},    {0.525, 0.7932},
          {0.53, 0.862},   {0.535, 0.9149}, {0.54, 0.954},   {0.545, 0.9803}, {0.55, 0.995},
          {0.555, 1},      {0.56, 0.995},   {0.565, 0.9786}, {0.57, 0.952},   {0.575, 0.9154},
          {0.58, 0.87},    {0.585, 0.8163}, {0.59, 0.757},   {0.595, 0.6949}, {0.6, 0.631},
          {0.605, 0.5668}, {0.61, 0.503},   {0.615, 0.4412}, {0.62, 0.381},   {0.625, 0.321},
          {0.63, 0.265},   {0.635, 0.217},  {0.64, 0.175},   {0.645, 0.1382}, {0.65, 0.107},
          {0.655, 0.0816}, {0.66, 0.061},   {0.665, 0.0446}, {0.67, 0.032},   {0.675, 0.0232},
          {0.68, 0.017},   {0.685, 0.0119}, {0.69, 0.0082},  {0.695, 0.0057}, {0.7, 0.0041},
          {0.705, 0.0029}, {0.71, 0.0021},  {0.715, 0.0015}, {0.72, 0.001},   {0.725, 0.0007},
          {0.73, 0.0005},  {0.735, 0.0004}, {0.74, 0.0002},  {0.745, 0.0002}, {0.75, 0.0001},
          {0.755, 0.0001}, {0.76, 0.0001},  {0.765, 0},      {0.77, 0},       {0.775, 0},
          {0.78, 0}}));

        return detectorData;
    }

    std::vector<double> wavelengthSet{
      0.38, 0.385, 0.39, 0.395, 0.4,  0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445,
      0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495, 0.5,  0.505, 0.51, 0.515,
      0.52, 0.525, 0.53, 0.535, 0.54, 0.545, 0.55, 0.555, 0.56, 0.565, 0.57, 0.575, 0.58, 0.585,
      0.59, 0.595, 0.6,  0.605, 0.61, 0.615, 0.62, 0.625, 0.63, 0.635, 0.64, 0.645, 0.65, 0.655,
      0.66, 0.665, 0.67, 0.675, 0.68, 0.685, 0.69, 0.695, 0.7,  0.705, 0.71, 0.715, 0.72, 0.725,
      0.73, 0.735, 0.74, 0.745, 0.75, 0.755, 0.76, 0.765, 0.77, 0.775, 0.78};

    std::shared_ptr<CSpectralSampleData> loadSampleData_NFRC_102()
    {
        auto aMeasurements_102 = CSpectralSampleData::create(
          {{0.300, 0.0020, 0.0470, 0.0480}, {0.305, 0.0030, 0.0470, 0.0480},
           {0.310, 0.0090, 0.0470, 0.0480}, {0.315, 0.0350, 0.0470, 0.0480},
           {0.320, 0.1000, 0.0470, 0.0480}, {0.325, 0.2180, 0.0490, 0.0500},
           {0.330, 0.3560, 0.0530, 0.0540}, {0.335, 0.4980, 0.0600, 0.0610},
           {0.340, 0.6160, 0.0670, 0.0670}, {0.345, 0.7090, 0.0730, 0.0740},
           {0.350, 0.7740, 0.0780, 0.0790}, {0.355, 0.8180, 0.0820, 0.0820},
           {0.360, 0.8470, 0.0840, 0.0840}, {0.365, 0.8630, 0.0850, 0.0850},
           {0.370, 0.8690, 0.0850, 0.0860}, {0.375, 0.8610, 0.0850, 0.0850},
           {0.380, 0.8560, 0.0840, 0.0840}, {0.385, 0.8660, 0.0850, 0.0850},
           {0.390, 0.8810, 0.0860, 0.0860}, {0.395, 0.8890, 0.0860, 0.0860},
           {0.400, 0.8930, 0.0860, 0.0860}, {0.410, 0.8930, 0.0860, 0.0860},
           {0.420, 0.8920, 0.0860, 0.0860}, {0.430, 0.8920, 0.0850, 0.0850},
           {0.440, 0.8920, 0.0850, 0.0850}, {0.450, 0.8960, 0.0850, 0.0850},
           {0.460, 0.9000, 0.0850, 0.0850}, {0.470, 0.9020, 0.0840, 0.0840},
           {0.480, 0.9030, 0.0840, 0.0840}, {0.490, 0.9040, 0.0850, 0.0850},
           {0.500, 0.9050, 0.0840, 0.0840}, {0.510, 0.9050, 0.0840, 0.0840},
           {0.520, 0.9050, 0.0840, 0.0840}, {0.530, 0.9040, 0.0840, 0.0840},
           {0.540, 0.9040, 0.0830, 0.0830}, {0.550, 0.9030, 0.0830, 0.0830},
           {0.560, 0.9020, 0.0830, 0.0830}, {0.570, 0.9000, 0.0820, 0.0820},
           {0.580, 0.8980, 0.0820, 0.0820}, {0.590, 0.8960, 0.0810, 0.0810},
           {0.600, 0.8930, 0.0810, 0.0810}, {0.610, 0.8900, 0.0810, 0.0810},
           {0.620, 0.8860, 0.0800, 0.0800}, {0.630, 0.8830, 0.0800, 0.0800},
           {0.640, 0.8790, 0.0790, 0.0790}, {0.650, 0.8750, 0.0790, 0.0790},
           {0.660, 0.8720, 0.0790, 0.0790}, {0.670, 0.8680, 0.0780, 0.0780},
           {0.680, 0.8630, 0.0780, 0.0780}, {0.690, 0.8590, 0.0770, 0.0770},
           {0.700, 0.8540, 0.0760, 0.0770}, {0.710, 0.8500, 0.0760, 0.0760},
           {0.720, 0.8450, 0.0750, 0.0760}, {0.730, 0.8400, 0.0750, 0.0750},
           {0.740, 0.8350, 0.0750, 0.0750}, {0.750, 0.8310, 0.0740, 0.0740},
           {0.760, 0.8260, 0.0740, 0.0740}, {0.770, 0.8210, 0.0740, 0.0740},
           {0.780, 0.8160, 0.0730, 0.0730}, {0.790, 0.8120, 0.0730, 0.0730},
           {0.800, 0.8080, 0.0720, 0.0720}, {0.810, 0.8030, 0.0720, 0.0720},
           {0.820, 0.8000, 0.0720, 0.0720}, {0.830, 0.7960, 0.0710, 0.0710},
           {0.840, 0.7930, 0.0700, 0.0710}, {0.850, 0.7880, 0.0700, 0.0710},
           {0.860, 0.7860, 0.0700, 0.0700}, {0.870, 0.7820, 0.0740, 0.0740},
           {0.880, 0.7800, 0.0720, 0.0720}, {0.890, 0.7770, 0.0730, 0.0740},
           {0.900, 0.7760, 0.0720, 0.0720}, {0.910, 0.7730, 0.0720, 0.0720},
           {0.920, 0.7710, 0.0710, 0.0710}, {0.930, 0.7700, 0.0700, 0.0700},
           {0.940, 0.7680, 0.0690, 0.0690}, {0.950, 0.7660, 0.0680, 0.0680},
           {0.960, 0.7660, 0.0670, 0.0680}, {0.970, 0.7640, 0.0680, 0.0680},
           {0.980, 0.7630, 0.0680, 0.0680}, {0.990, 0.7620, 0.0670, 0.0670},
           {1.000, 0.7620, 0.0660, 0.0670}, {1.050, 0.7600, 0.0660, 0.0660},
           {1.100, 0.7590, 0.0660, 0.0660}, {1.150, 0.7610, 0.0660, 0.0660},
           {1.200, 0.7650, 0.0660, 0.0660}, {1.250, 0.7700, 0.0650, 0.0650},
           {1.300, 0.7770, 0.0670, 0.0670}, {1.350, 0.7860, 0.0660, 0.0670},
           {1.400, 0.7950, 0.0670, 0.0680}, {1.450, 0.8080, 0.0670, 0.0670},
           {1.500, 0.8190, 0.0690, 0.0690}, {1.550, 0.8290, 0.0690, 0.0690},
           {1.600, 0.8360, 0.0700, 0.0700}, {1.650, 0.8400, 0.0700, 0.0700},
           {1.700, 0.8420, 0.0690, 0.0700}, {1.750, 0.8420, 0.0690, 0.0700},
           {1.800, 0.8410, 0.0700, 0.0700}, {1.850, 0.8400, 0.0690, 0.0690},
           {1.900, 0.8390, 0.0680, 0.0680}, {1.950, 0.8390, 0.0710, 0.0710},
           {2.000, 0.8390, 0.0690, 0.0690}, {2.050, 0.8400, 0.0680, 0.0680},
           {2.100, 0.8410, 0.0680, 0.0680}, {2.150, 0.8390, 0.0690, 0.0690},
           {2.200, 0.8300, 0.0700, 0.0700}, {2.250, 0.8300, 0.0700, 0.0700},
           {2.300, 0.8320, 0.0690, 0.0690}, {2.350, 0.8320, 0.0690, 0.0700},
           {2.400, 0.8320, 0.0700, 0.0700}, {2.450, 0.8260, 0.0690, 0.0690},
           {2.500, 0.8220, 0.0680, 0.0680}});

        return aMeasurements_102;
    }

protected:
    virtual void SetUp()
    {
        auto thickness = 3.048e-3;   // [m]
        auto aMaterial_102 = SingleLayerOptics::Material::nBandMaterial(
          loadSampleData_NFRC_102(), thickness, MaterialType::Monolithic, WavelengthRange::Solar);

        const auto aBSDF = CBSDFHemisphere::create(BSDFBasis::Quarter);

        auto Layer_102 = CBSDFLayerMaker::getSpecularLayer(aMaterial_102, aBSDF);

        // Solar range
        const auto Tsol = 0.5;
        const auto Rfsol = 0.3;
        const auto Rbsol = 0.3;

        // Visible range
        const auto Tvis = 0.4;
        const auto Rfvis = 0.2;
        const auto Rbvis = 0.2;

        auto aMaterial = SingleLayerOptics::Material::dualBandMaterial(
          Tsol, Tsol, Rfsol, Rbsol, Tvis, Tvis, Rfvis, Rbvis);

        aMaterial->setBandWavelengths(wavelengthSet);

        auto diffuseLayer = CBSDFLayerMaker::getPerfectlyDiffuseLayer(aMaterial, aBSDF);

        m_Layer = CMultiPaneBSDF::create(
          {Layer_102, diffuseLayer}, loadSolarRadiationFile(), getDetectorData(), wavelengthSet);
    }

public:
    CMultiPaneBSDF & getLayer()
    {
        return *m_Layer;
    }
};

TEST_F(MultiPaneBSDF_102_PerfectDiffuse_Visible, TestPerfectDiffuseBSDFVisible)
{
    SCOPED_TRACE("Begin Test: Perfectly diffusing IGU - BSDF.");

    const double minLambda = 0.38;
    const double maxLambda = 0.78;

    CMultiPaneBSDF & aLayer = getLayer();

    double tauDiff = aLayer.DiffDiff(minLambda, maxLambda, Side::Front, PropertySimple::T);
    EXPECT_NEAR(0.33674322275626606, tauDiff, 1e-6);

    double rhoDiff = aLayer.DiffDiff(minLambda, maxLambda, Side::Front, PropertySimple::R);
    EXPECT_NEAR(0.30295859828011501, rhoDiff, 1e-6);

    double absDiff1 = aLayer.AbsDiff(minLambda, maxLambda, Side::Front, 1);
    EXPECT_NEAR(0.023554956207358275, absDiff1, 1e-6);

    double absDiff2 = aLayer.AbsDiff(minLambda, maxLambda, Side::Front, 2);
    EXPECT_NEAR(0.33674322275626389, absDiff2, 1e-6);

    double theta = 0;
    double phi = 0;

    double tauHem = aLayer.DirHem(minLambda, maxLambda, Side::Front, PropertySimple::T, theta, phi);
    EXPECT_NEAR(0.37219116519590029, tauHem, 1e-6);

    double tauDir = aLayer.DirDir(minLambda, maxLambda, Side::Front, PropertySimple::T, theta, phi);
    EXPECT_NEAR(0.0091081661144266721, tauDir, 1e-6);

    double tauDirDiff =
      aLayer.DirDiff(minLambda, maxLambda, Side::Front, PropertySimple::T, theta, phi);
    EXPECT_NEAR(0.36308299908147362, tauDirDiff, 1e-6);

    double rhoHem = aLayer.DirHem(minLambda, maxLambda, Side::Front, PropertySimple::R, theta, phi);
    EXPECT_NEAR(0.23412372228100389, rhoHem, 1e-6);

    double rhoDir = aLayer.DirDir(minLambda, maxLambda, Side::Front, PropertySimple::R, theta, phi);
    EXPECT_NEAR(0.086742861860463094, rhoDir, 1e-6);

    double abs1 = aLayer.Abs(minLambda, maxLambda, Side::Front, 1, theta, phi);
    EXPECT_NEAR(0.021493947327196235, abs1, 1e-6);

    double abs2 = aLayer.Abs(minLambda, maxLambda, Side::Front, 2, theta, phi);
    EXPECT_NEAR(0.37219116519590056, abs2, 1e-6);
}
