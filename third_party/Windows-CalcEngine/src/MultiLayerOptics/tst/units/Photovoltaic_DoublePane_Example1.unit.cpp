#include <memory>
#include <gtest/gtest.h>

#include "WCESpectralAveraging.hpp"
#include "WCEMultiLayerOptics.hpp"
#include "WCESingleLayerOptics.hpp"
#include "WCECommon.hpp"

using FenestrationCommon::CSeries;
using FenestrationCommon::Property;
using FenestrationCommon::PropertySimple;
using FenestrationCommon::Side;
using FenestrationCommon::Scattering;
using SpectralAveraging::CSpectralSampleData;
using SingleLayerOptics::Material;
using MultiLayerOptics::CMultiPanePhotovoltaic;

class Photovoltaic_DoublePane_Example1 : public testing::Test
{
private:
    std::unique_ptr<CMultiPanePhotovoltaic> m_Layer;

    CSeries loadSolarRadiationFile() const
    {
        // Full ASTM E891-87 Table 1 (Solar radiation)
        CSeries aSolarRadiation(
          {{0.3000, 0.0},    {0.3050, 3.4},    {0.3100, 15.6},   {0.3150, 41.1},   {0.3200, 71.2},
           {0.3250, 100.2},  {0.3300, 152.4},  {0.3350, 155.6},  {0.3400, 179.4},  {0.3450, 186.7},
           {0.3500, 212.0},  {0.3600, 240.5},  {0.3700, 324.0},  {0.3800, 362.4},  {0.3900, 381.7},
           {0.4000, 556.0},  {0.4100, 656.3},  {0.4200, 690.8},  {0.4300, 641.9},  {0.4400, 798.5},
           {0.4500, 956.6},  {0.4600, 990.0},  {0.4700, 998.0},  {0.4800, 1046.1}, {0.4900, 1005.1},
           {0.5000, 1026.7}, {0.5100, 1066.7}, {0.5200, 1011.5}, {0.5300, 1084.9}, {0.5400, 1082.4},
           {0.5500, 1102.2}, {0.5700, 1087.4}, {0.5900, 1024.3}, {0.6100, 1088.8}, {0.6300, 1062.1},
           {0.6500, 1061.7}, {0.6700, 1046.2}, {0.6900, 859.2},  {0.7100, 1002.4}, {0.7180, 816.9},
           {0.7244, 842.8},  {0.7400, 971.0},  {0.7525, 956.3},  {0.7575, 942.2},  {0.7625, 524.8},
           {0.7675, 830.7},  {0.7800, 908.9},  {0.8000, 873.4},  {0.8160, 712.0},  {0.8237, 660.2},
           {0.8315, 765.5},  {0.8400, 799.8},  {0.8600, 815.2},  {0.8800, 778.3},  {0.9050, 630.4},
           {0.9150, 565.2},  {0.9250, 586.4},  {0.9300, 348.1},  {0.9370, 224.2},  {0.9480, 271.4},
           {0.9650, 451.2},  {0.9800, 549.7},  {0.9935, 630.1},  {1.0400, 582.9},  {1.0700, 539.7},
           {1.1000, 366.2},  {1.1200, 98.1},   {1.1300, 169.5},  {1.1370, 118.7},  {1.1610, 301.9},
           {1.1800, 406.8},  {1.2000, 375.2},  {1.2350, 423.6},  {1.2900, 365.7},  {1.3200, 223.4},
           {1.3500, 30.1},   {1.3950, 1.4},    {1.4425, 51.6},   {1.4625, 97.0},   {1.4770, 97.3},
           {1.4970, 167.1},  {1.5200, 239.3},  {1.5390, 248.8},  {1.5580, 249.3},  {1.5780, 222.3},
           {1.5920, 227.3},  {1.6100, 210.5},  {1.6300, 224.7},  {1.6460, 215.9},  {1.6780, 202.8},
           {1.7400, 158.2},  {1.8000, 28.6},   {1.8600, 1.8},    {1.9200, 1.1},    {1.9600, 19.7},
           {1.9850, 84.9},   {2.0050, 25.0},   {2.0350, 92.5},   {2.0650, 56.3},   {2.1000, 82.7},
           {2.1480, 76.2},   {2.1980, 66.4},   {2.2700, 65.0},   {2.3600, 57.6},   {2.4500, 19.8},
           {2.4940, 17.0},   {2.5370, 3.0},    {2.9410, 4.0},    {2.9730, 7.0},    {3.0050, 6.0},
           {3.0560, 3.0},    {3.1320, 5.0},    {3.1560, 18.0},   {3.2040, 1.2},    {3.2450, 3.0},
           {3.3170, 12.0},   {3.3440, 3.0},    {3.4500, 12.2},   {3.5730, 11.0},   {3.7650, 9.0},
           {4.0450, 6.9}

          });

        return aSolarRadiation;
    }

    std::shared_ptr<CSpectralSampleData> loadSampleData_1() const
    {
        return CSpectralSampleData::create(
          {{0.300, 0.002, 0.047, 0.048}, {0.305, 0.003, 0.047, 0.048},
           {0.310, 0.009, 0.047, 0.048}, {0.315, 0.035, 0.047, 0.048},
           {0.320, 0.100, 0.047, 0.048}, {0.325, 0.218, 0.049, 0.050},
           {0.330, 0.356, 0.053, 0.054}, {0.335, 0.498, 0.060, 0.061},
           {0.340, 0.616, 0.067, 0.067}, {0.345, 0.709, 0.073, 0.074},
           {0.350, 0.774, 0.078, 0.079}, {0.355, 0.818, 0.082, 0.082},
           {0.360, 0.847, 0.084, 0.084}, {0.365, 0.863, 0.085, 0.085},
           {0.370, 0.869, 0.085, 0.086}, {0.375, 0.861, 0.085, 0.085},
           {0.380, 0.856, 0.084, 0.084}, {0.385, 0.866, 0.085, 0.085},
           {0.390, 0.881, 0.086, 0.086}, {0.395, 0.889, 0.086, 0.086},
           {0.400, 0.893, 0.086, 0.086}, {0.410, 0.893, 0.086, 0.086},
           {0.420, 0.892, 0.086, 0.086}, {0.430, 0.892, 0.085, 0.085},
           {0.440, 0.892, 0.085, 0.085}, {0.450, 0.896, 0.085, 0.085},
           {0.460, 0.900, 0.085, 0.085}, {0.470, 0.902, 0.084, 0.084},
           {0.480, 0.903, 0.084, 0.084}, {0.490, 0.904, 0.085, 0.085},
           {0.500, 0.905, 0.084, 0.084}, {0.510, 0.905, 0.084, 0.084},
           {0.520, 0.905, 0.084, 0.084}, {0.530, 0.904, 0.084, 0.084},
           {0.540, 0.904, 0.083, 0.083}, {0.550, 0.903, 0.083, 0.083},
           {0.560, 0.902, 0.083, 0.083}, {0.570, 0.900, 0.082, 0.082},
           {0.580, 0.898, 0.082, 0.082}, {0.590, 0.896, 0.081, 0.081},
           {0.600, 0.893, 0.081, 0.081}, {0.610, 0.890, 0.081, 0.081},
           {0.620, 0.886, 0.080, 0.080}, {0.630, 0.883, 0.080, 0.080},
           {0.640, 0.879, 0.079, 0.079}, {0.650, 0.875, 0.079, 0.079},
           {0.660, 0.872, 0.079, 0.079}, {0.670, 0.868, 0.078, 0.078},
           {0.680, 0.863, 0.078, 0.078}, {0.690, 0.859, 0.077, 0.077},
           {0.700, 0.854, 0.076, 0.077}, {0.710, 0.850, 0.076, 0.076},
           {0.720, 0.845, 0.075, 0.076}, {0.730, 0.840, 0.075, 0.075},
           {0.740, 0.835, 0.075, 0.075}, {0.750, 0.831, 0.074, 0.074},
           {0.760, 0.826, 0.074, 0.074}, {0.770, 0.821, 0.074, 0.074},
           {0.780, 0.816, 0.073, 0.073}, {0.790, 0.812, 0.073, 0.073},
           {0.800, 0.808, 0.072, 0.072}, {0.810, 0.803, 0.072, 0.072},
           {0.820, 0.800, 0.072, 0.072}, {0.830, 0.796, 0.071, 0.071},
           {0.840, 0.793, 0.070, 0.071}, {0.850, 0.788, 0.070, 0.071},
           {0.860, 0.786, 0.070, 0.070}, {0.870, 0.782, 0.074, 0.074},
           {0.880, 0.780, 0.072, 0.072}, {0.890, 0.777, 0.073, 0.074},
           {0.900, 0.776, 0.072, 0.072}, {0.910, 0.773, 0.072, 0.072},
           {0.920, 0.771, 0.071, 0.071}, {0.930, 0.770, 0.070, 0.070},
           {0.940, 0.768, 0.069, 0.069}, {0.950, 0.766, 0.068, 0.068},
           {0.960, 0.766, 0.067, 0.068}, {0.970, 0.764, 0.068, 0.068},
           {0.980, 0.763, 0.068, 0.068}, {0.990, 0.762, 0.067, 0.067},
           {1.000, 0.762, 0.066, 0.067}, {1.050, 0.760, 0.066, 0.066},
           {1.100, 0.759, 0.066, 0.066}, {1.150, 0.761, 0.066, 0.066},
           {1.200, 0.765, 0.066, 0.066}, {1.250, 0.770, 0.065, 0.065},
           {1.300, 0.777, 0.067, 0.067}, {1.350, 0.786, 0.066, 0.067},
           {1.400, 0.795, 0.067, 0.068}, {1.450, 0.808, 0.067, 0.067},
           {1.500, 0.819, 0.069, 0.069}, {1.550, 0.829, 0.069, 0.069},
           {1.600, 0.836, 0.070, 0.070}, {1.650, 0.840, 0.070, 0.070},
           {1.700, 0.842, 0.069, 0.070}, {1.750, 0.842, 0.069, 0.070},
           {1.800, 0.841, 0.070, 0.070}, {1.850, 0.840, 0.069, 0.069},
           {1.900, 0.839, 0.068, 0.068}, {1.950, 0.839, 0.071, 0.071},
           {2.000, 0.839, 0.069, 0.069}, {2.050, 0.840, 0.068, 0.068},
           {2.100, 0.841, 0.068, 0.068}, {2.150, 0.839, 0.069, 0.069},
           {2.200, 0.830, 0.070, 0.070}, {2.250, 0.830, 0.070, 0.070},
           {2.300, 0.832, 0.069, 0.069}, {2.350, 0.832, 0.069, 0.070},
           {2.400, 0.832, 0.070, 0.070}, {2.450, 0.826, 0.069, 0.069},
           {2.500, 0.822, 0.068, 0.068}});
    }

    std::vector<SpectralAveraging::PVMeasurementRow> pvMeasurements()
    {
        std::vector<SpectralAveraging::PVMeasurementRow> measurements{
          {0.300, {0.000, 0.9, 0.435}, {0.000, 0.9, 0.51}},
          {0.305, {0.000, 0.9, 0.435}, {0.000, 0.9, 0.51}},
          {0.310, {0.001, 0.9, 0.435}, {0.000, 0.9, 0.51}},
          {0.315, {0.004, 0.9, 0.435}, {0.002, 0.9, 0.51}},
          {0.320, {0.010, 0.9, 0.435}, {0.005, 0.9, 0.51}},
          {0.325, {0.022, 0.9, 0.435}, {0.011, 0.9, 0.51}},
          {0.330, {0.036, 0.9, 0.435}, {0.018, 0.9, 0.51}},
          {0.335, {0.050, 0.9, 0.435}, {0.025, 0.9, 0.51}},
          {0.340, {0.062, 0.9, 0.435}, {0.031, 0.9, 0.51}},
          {0.345, {0.071, 0.9, 0.435}, {0.035, 0.9, 0.51}},
          {0.350, {0.077, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.355, {0.082, 0.9, 0.435}, {0.041, 0.9, 0.51}},
          {0.360, {0.085, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {0.365, {0.086, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.370, {0.087, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.375, {0.086, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.380, {0.086, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.385, {0.087, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.390, {0.088, 0.9, 0.435}, {0.044, 0.9, 0.51}},
          {0.395, {0.089, 0.9, 0.435}, {0.044, 0.9, 0.51}},
          {0.400, {0.089, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.410, {0.089, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.420, {0.089, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.430, {0.089, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.440, {0.089, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.450, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.460, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.470, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.480, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.490, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.500, {0.091, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.510, {0.091, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.520, {0.091, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.530, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.540, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.550, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.560, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.570, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.580, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.590, {0.090, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.600, {0.089, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.610, {0.089, 0.9, 0.435}, {0.045, 0.9, 0.51}},
          {0.620, {0.089, 0.9, 0.435}, {0.044, 0.9, 0.51}},
          {0.630, {0.088, 0.9, 0.435}, {0.044, 0.9, 0.51}},
          {0.640, {0.088, 0.9, 0.435}, {0.044, 0.9, 0.51}},
          {0.650, {0.088, 0.9, 0.435}, {0.044, 0.9, 0.51}},
          {0.660, {0.087, 0.9, 0.435}, {0.044, 0.9, 0.51}},
          {0.670, {0.087, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.680, {0.086, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.690, {0.086, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.700, {0.085, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.710, {0.085, 0.9, 0.435}, {0.043, 0.9, 0.51}},
          {0.720, {0.085, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {0.730, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {0.740, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {0.750, {0.083, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {0.760, {0.083, 0.9, 0.435}, {0.041, 0.9, 0.51}},
          {0.770, {0.082, 0.9, 0.435}, {0.041, 0.9, 0.51}},
          {0.780, {0.082, 0.9, 0.435}, {0.041, 0.9, 0.51}},
          {0.790, {0.081, 0.9, 0.435}, {0.041, 0.9, 0.51}},
          {0.800, {0.081, 0.9, 0.435}, {0.040, 0.9, 0.51}},
          {0.810, {0.080, 0.9, 0.435}, {0.040, 0.9, 0.51}},
          {0.820, {0.080, 0.9, 0.435}, {0.040, 0.9, 0.51}},
          {0.830, {0.080, 0.9, 0.435}, {0.040, 0.9, 0.51}},
          {0.840, {0.079, 0.9, 0.435}, {0.040, 0.9, 0.51}},
          {0.850, {0.079, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.860, {0.079, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.870, {0.078, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.880, {0.078, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.890, {0.078, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.900, {0.078, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.910, {0.077, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.920, {0.077, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.930, {0.077, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {0.940, {0.077, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {0.950, {0.077, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {0.960, {0.077, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {0.970, {0.076, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {0.980, {0.076, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {0.990, {0.076, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {1.000, {0.076, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {1.050, {0.076, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {1.100, {0.076, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {1.150, {0.076, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {1.200, {0.077, 0.9, 0.435}, {0.038, 0.9, 0.51}},
          {1.250, {0.077, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {1.300, {0.078, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {1.350, {0.079, 0.9, 0.435}, {0.039, 0.9, 0.51}},
          {1.400, {0.080, 0.9, 0.435}, {0.040, 0.9, 0.51}},
          {1.450, {0.081, 0.9, 0.435}, {0.040, 0.9, 0.51}},
          {1.500, {0.082, 0.9, 0.435}, {0.041, 0.9, 0.51}},
          {1.550, {0.083, 0.9, 0.435}, {0.041, 0.9, 0.51}},
          {1.600, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {1.650, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {1.700, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {1.750, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {1.800, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {1.850, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {1.900, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {1.950, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.000, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.050, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.100, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.150, {0.084, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.200, {0.083, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.250, {0.083, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.300, {0.083, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.350, {0.083, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.400, {0.083, 0.9, 0.435}, {0.042, 0.9, 0.51}},
          {2.450, {0.083, 0.9, 0.435}, {0.041, 0.9, 0.51}},
          {2.500, {0.082, 0.9, 0.435}, {0.041, 0.9, 0.51}}};
        return measurements;
    };


protected:
    virtual void SetUp()
    {
        const auto aSolarRadiation = loadSolarRadiationFile();
        auto pvSample = std::make_shared<SpectralAveraging::PhotovoltaicSampleData>(
          *loadSampleData_1(), pvMeasurements());

        double thickness = 3.048e-3;   // [m]
        const auto aMaterial_1 =
          Material::nBandPhotovoltaicMaterial(pvSample,
                                              thickness,
                                              FenestrationCommon::MaterialType::Monolithic,
                                              FenestrationCommon::WavelengthRange::Solar);

        thickness = 5.715e-3;   // [m]
        const auto aMaterial_2 =
          Material::nBandMaterial(loadSampleData_1(),
                                  thickness,
                                  FenestrationCommon::MaterialType::Monolithic,
                                  FenestrationCommon::WavelengthRange::Solar);

        const auto layer102 = SingleLayerOptics::PhotovoltaicLayer::createLayer(aMaterial_1);
        const auto layer103 = SingleLayerOptics::SpecularLayer::createLayer(aMaterial_2);

        m_Layer = CMultiPanePhotovoltaic::create({layer102, layer103}, loadSolarRadiationFile());
    }

public:
    CMultiPanePhotovoltaic * getLayer() const
    {
        return m_Layer.get();
    };
};

TEST_F(Photovoltaic_DoublePane_Example1, Test1)
{
    SCOPED_TRACE("Begin Test: Double pane photovoltaic - Example 1.");

    const double angle{0.0};
    const double minLambda{0.3};
    const double maxLambda{2.5};

    auto aLayer = getLayer();

    const double T =
      aLayer->getPropertySimple(PropertySimple::T, Side::Front, Scattering::DirectDirect, angle, 0);
    EXPECT_NEAR(0.703243, T, 1e-6);

    const double absHeat = aLayer->AbsHeat(1, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.074110, absHeat, 1e-6);

    const double absEl1 = aLayer->AbsElectricity(1, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.022369, absEl1, 1e-6);

    const double absEl2 = aLayer->AbsElectricity(2, angle, minLambda, maxLambda);
    EXPECT_NEAR(0, absEl2, 1e-6);
}