


#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define lp_yyconst const
#else
#define lp_yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* lp_yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define lp_yyin lp_yyg->lp_yyin_r
#define lp_yyout lp_yyg->lp_yyout_r
#define lp_yyextra lp_yyg->lp_yyextra_r
#define lp_yyleng lp_yyg->lp_yyleng_r
#define lp_yytext lp_yyg->lp_yytext_r
#define lp_yylineno (YY_CURRENT_BUFFER_LVALUE->lp_yy_bs_lineno)
#define lp_yycolumn (YY_CURRENT_BUFFER_LVALUE->lp_yy_bs_column)
#define lp_yy_flex_debug lp_yyg->lp_yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN lp_yyg->lp_yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((lp_yyg->lp_yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE lp_yyrestart(lp_yyin ,lp_yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(lp_yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct lp_yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for lp_yy_rule_can_match_eol because it requires
     *       access to the local variable lp_yy_act. Since lp_yyless() is a macro, it would break
     *       existing scanners that call lp_yyless() from OUTSIDE lp_yylex. 
     *       One obvious solution it to make lp_yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-lp_yylineno scanner, because lp_yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int lp_yyl;\
                for ( lp_yyl = n; lp_yyl < lp_yyleng; ++lp_yyl )\
                    if ( lp_yytext[lp_yyl] == '\n' )\
                        --lp_yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define lp_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up lp_yytext. */ \
        int lp_yyless_macro_arg = (n); \
        YY_LESS_LINENO(lp_yyless_macro_arg);\
		*lp_yy_cp = lp_yyg->lp_yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		lp_yyg->lp_yy_c_buf_p = lp_yy_cp = lp_yy_bp + lp_yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up lp_yytext again */ \
		} \
	while ( 0 )

#define unput(c) lp_yyunput( c, lp_yyg->lp_yytext_ptr , lp_yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t lp_yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct lp_yy_buffer_state
	{
	FILE *lp_yy_input_file;

	char *lp_yy_ch_buf;		/* input buffer */
	char *lp_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	lp_yy_size_t lp_yy_buf_size;

	/* Number of characters read into lp_yy_ch_buf, not including EOB
	 * characters.
	 */
	int lp_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int lp_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int lp_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int lp_yy_at_bol;

    int lp_yy_bs_lineno; /**< The line count. */
    int lp_yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int lp_yy_fill_buffer;

	int lp_yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via lp_yyrestart()), so that the user can continue scanning by
	 * just pointing lp_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( lp_yyg->lp_yy_buffer_stack \
                          ? lp_yyg->lp_yy_buffer_stack[lp_yyg->lp_yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE lp_yyg->lp_yy_buffer_stack[lp_yyg->lp_yy_buffer_stack_top]

void lp_yyrestart (FILE *input_file ,lp_yyscan_t lp_yyscanner );
void lp_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,lp_yyscan_t lp_yyscanner );
YY_BUFFER_STATE lp_yy_create_buffer (FILE *file,int size ,lp_yyscan_t lp_yyscanner );
void lp_yy_delete_buffer (YY_BUFFER_STATE b ,lp_yyscan_t lp_yyscanner );
void lp_yy_flush_buffer (YY_BUFFER_STATE b ,lp_yyscan_t lp_yyscanner );
void lp_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,lp_yyscan_t lp_yyscanner );
void lp_yypop_buffer_state (lp_yyscan_t lp_yyscanner );

static void lp_yyensure_buffer_stack (lp_yyscan_t lp_yyscanner );
static void lp_yy_load_buffer_state (lp_yyscan_t lp_yyscanner );
static void lp_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,lp_yyscan_t lp_yyscanner );

#define YY_FLUSH_BUFFER lp_yy_flush_buffer(YY_CURRENT_BUFFER ,lp_yyscanner)

YY_BUFFER_STATE lp_yy_scan_buffer (char *base,lp_yy_size_t size ,lp_yyscan_t lp_yyscanner );
YY_BUFFER_STATE lp_yy_scan_string (lp_yyconst char *lp_yy_str ,lp_yyscan_t lp_yyscanner );
YY_BUFFER_STATE lp_yy_scan_bytes (lp_yyconst char *bytes,int len ,lp_yyscan_t lp_yyscanner );

void *lp_yyalloc (lp_yy_size_t ,lp_yyscan_t lp_yyscanner );
void *lp_yyrealloc (void *,lp_yy_size_t ,lp_yyscan_t lp_yyscanner );
void lp_yyfree (void * ,lp_yyscan_t lp_yyscanner );

#define lp_yy_new_buffer lp_yy_create_buffer

#define lp_yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        lp_yyensure_buffer_stack (lp_yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            lp_yy_create_buffer(lp_yyin,YY_BUF_SIZE ,lp_yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->lp_yy_is_interactive = is_interactive; \
	}

#define lp_yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        lp_yyensure_buffer_stack (lp_yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            lp_yy_create_buffer(lp_yyin,YY_BUF_SIZE ,lp_yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->lp_yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->lp_yy_at_bol)

/* Begin user sect3 */

#define lp_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int lp_yy_state_type;

#define lp_yytext_ptr lp_yytext_r

static lp_yy_state_type lp_yy_get_previous_state (lp_yyscan_t lp_yyscanner );
static lp_yy_state_type lp_yy_try_NUL_trans (lp_yy_state_type current_state  ,lp_yyscan_t lp_yyscanner);
static int lp_yy_get_next_buffer (lp_yyscan_t lp_yyscanner );
static void lp_yy_fatal_error (lp_yyconst char msg[] ,lp_yyscan_t lp_yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up lp_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	lp_yyg->lp_yytext_ptr = lp_yy_bp; \
	lp_yyleng = (int) (lp_yy_cp - lp_yy_bp); \
	lp_yyg->lp_yy_hold_char = *lp_yy_cp; \
	*lp_yy_cp = '\0'; \
	lp_yyg->lp_yy_c_buf_p = lp_yy_cp;

#define YY_NUM_RULES 33
#define YY_END_OF_BUFFER 34
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct lp_yy_trans_info
	{
	flex_int32_t lp_yy_verify;
	flex_int32_t lp_yy_nxt;
	};
static lp_yyconst flex_int16_t lp_yy_accept[144] =
    {   0,
        0,    0,    0,    0,    0,    0,   34,   32,   10,   10,
       27,   17,   11,   32,   32,   14,   26,   31,   29,   28,
       30,   25,   25,   10,   25,   25,   25,   25,    3,    4,
        3,    3,    9,    7,    8,   10,   17,   17,    0,   15,
        1,    6,   15,   14,    0,   29,   30,    0,   25,   24,
        0,   25,   25,   10,    0,    0,    0,    0,   25,   25,
       25,   25,   25,    2,    0,   15,    0,   15,   22,    0,
       25,   25,    0,    0,    0,    0,    0,   19,   25,   18,
       20,   25,   25,   21,    0,   25,    0,   13,   25,    0,
       12,   25,   19,    0,   18,   20,   21,   25,   23,   25,

       20,   21,   21,   16,   16,    0,   25,   25,    0,   23,
        0,   21,   25,   25,    0,    0,   25,   25,    0,    0,
       19,   25,    0,    0,   25,   25,   19,    0,   18,    0,
        0,   25,   25,   18,    0,    0,    0,    0,    0,    0,
        0,    0,    0
    } ;

static lp_yyconst flex_int32_t lp_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    6,    5,    5,    5,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   14,
       13,   13,   13,   13,   13,   13,   13,   15,   16,   17,
       18,   19,    1,    5,   20,   21,   22,   23,   24,   25,
       26,   23,   27,   23,   23,   23,   28,   29,   30,   23,
       23,   31,   32,   33,   34,   23,   23,   35,   36,   37,
        5,    1,    5,    5,    5,    1,   20,   21,   22,   23,

       24,   25,   26,   23,   27,   23,   23,   23,   28,   29,
       30,   23,   23,   31,   32,   33,   34,   23,   23,   35,
       36,   37,    5,    1,    5,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static lp_yyconst flex_int32_t lp_yy_meta[38] =
    {   0,
        1,    2,    3,    3,    4,    5,    6,    3,    6,    3,
        5,    5,    5,    5,    7,    6,    7,    6,    6,    4,
        4,    4,    4,    4,    4,    4,    8,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4
    } ;

static lp_yyconst flex_int16_t lp_yy_base[150] =
    {   0,
        0,   36,   36,   38,   43,   45,  366,  388,   48,   62,
      388,  338,  388,   40,   48,   60,  388,  388,  346,  388,
      326,   60,   65,   91,   81,   74,   85,  102,  388,  388,
      388,  330,  388,  388,  388,  125,  313,  134,  308,   96,
      388,  388,  117,  132,  139,  388,  388,   88,  146,  320,
        0,  149,  152,    0,  307,  301,  294,   83,  153,  156,
      157,  189,  160,  388,  286,  126,   65,  108,  388,  289,
      181,  185,  272,  273,  250,  249,  220,  199,  203,  208,
      192,  211,  219,  227,  243,  109,  163,  225,  202,  174,
      224,  215,  213,  207,  191,  388,  189,  227,  228,  231,

      244,  240,  253,  276,  388,  170,  260,  262,  166,  388,
      169,  179,  263,  241,  166,  159,  270,  272,  149,  155,
      284,  288,  130,  124,  296,  303,  388,  103,  300,   96,
       45,  324,  328,  388,   82,  311,   79,   68,   54,   56,
       25,   12,  388,  345,  353,  360,  367,  372,  379
    } ;

static lp_yyconst flex_int16_t lp_yy_def[150] =
    {   0,
      143,    1,  144,  144,  145,  145,  143,  143,  143,  143,
      143,  146,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  147,  147,  143,  147,  147,  147,  147,  143,  143,
      143,  143,  143,  143,  143,  143,  146,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  147,  143,
      148,  147,  147,   24,  143,  143,  143,  143,  147,  147,
      147,  147,  147,  143,  143,  143,  143,  143,  143,  148,
      147,  147,  143,  143,  143,  143,  143,  147,  147,  147,
      147,  147,  147,  147,  149,  143,  143,  143,   62,  143,
      143,   62,  143,  143,  143,  143,  143,   62,   62,   62,

       62,   62,   62,  143,  143,  143,   62,   62,  143,  143,
      143,  143,   62,   62,  143,  143,   62,   62,  143,  143,
       62,   62,  143,  143,   62,   62,  143,  143,   62,  143,
      143,  147,  147,  143,  143,  149,  143,  143,  143,  143,
      143,  143,    0,  143,  143,  143,  143,  143,  143
    } ;

static lp_yyconst flex_int16_t lp_yy_nxt[426] =
    {   0,
        8,    9,   10,    9,    8,    8,   11,   12,   13,   12,
       14,   15,   16,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   24,   30,   31,
       30,   31,   32,   96,   32,   34,   35,   34,   35,   36,
       36,   36,   40,   40,   41,   37,   25,   37,  142,   42,
       26,   48,   27,   36,   36,   36,   48,   28,  136,   37,
       43,   37,   44,   44,   50,   48,   51,   68,   68,   50,
      136,   51,   48,   45,   52,  141,   48,  140,   50,   48,
       51,   53,   54,   36,   36,   50,  139,   51,   37,   50,

       37,   51,   50,   48,   60,  138,   76,   59,   40,   40,
       48,   55,   77,   61,  137,   56,   50,   57,   51,   45,
       68,   68,   58,   50,  135,   62,   36,   36,   36,   66,
       66,   63,   37,  134,   37,   38,   38,   38,   66,   66,
       45,   38,   43,   38,   44,   44,   67,   48,   67,   45,
       48,   68,   68,   48,   48,   45,  131,   48,   48,  130,
       50,   48,   51,   50,   87,   51,   50,   50,   51,   51,
       50,   50,   51,   51,   50,   90,   51,   88,  128,   79,
       72,   78,   87,   71,  127,  124,   90,  123,   91,   80,
       48,   84,  112,   48,  120,   88,  119,   51,  116,   91,

       48,   51,  112,   50,   48,   51,   50,   89,   51,   48,
       81,   92,   48,   50,  111,   51,   82,   50,   98,   51,
       48,   83,   50,   49,   51,   50,   99,   51,   48,  107,
      110,  100,  109,   50,   49,   51,   49,  101,   69,   69,
      103,   50,  108,   51,  104,  104,  104,   49,   49,   49,
      102,   97,   49,  115,   49,   49,  114,  113,   49,   49,
       49,   49,   49,   49,  122,   49,  103,   49,   49,  106,
       96,   49,   49,   49,   49,   81,   49,  104,  104,  104,
       49,   49,   95,   49,   49,   49,  117,   49,  118,   49,
       49,   49,   49,   49,   49,   49,   94,   49,  121,   49,

       93,  125,   49,  126,   49,   49,  125,   86,  126,   49,
       85,   49,  104,  104,  104,   49,   49,   49,  129,  132,
       49,   49,   75,   49,   49,   87,  133,   49,   49,   90,
       49,   74,   49,   73,   69,   49,   65,  143,   88,   39,
       51,   64,   91,   47,   51,   29,   29,   29,   29,   29,
       29,   29,   29,   33,   33,   33,   33,   33,   33,   33,
       33,   38,   38,   46,   39,  143,  143,   38,   49,  143,
       49,   49,  143,   49,   49,   70,   70,  143,  143,   70,
      105,  105,  143,  105,  105,  105,  105,    7,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143
    } ;

static lp_yyconst flex_int16_t lp_yy_chk[426] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        4,    4,    3,  142,    4,    5,    5,    6,    6,    9,
        9,    9,   14,   14,   15,    9,    2,    9,  141,   15,
        2,   22,    2,   10,   10,   10,   23,    2,  131,   10,
       16,   10,   16,   16,   22,   26,   22,   67,   67,   23,
      131,   23,   25,   16,   23,  140,   27,  139,   26,   48,
       26,   23,   24,   24,   24,   25,  138,   25,   24,   27,

       24,   27,   48,   28,   26,  137,   58,   25,   40,   40,
       86,   24,   58,   27,  135,   24,   28,   24,   28,   40,
       68,   68,   24,   86,  130,   28,   36,   36,   36,   43,
       43,   28,   36,  128,   36,   38,   38,   38,   66,   66,
       43,   38,   44,   38,   44,   44,   45,   49,   45,   66,
       52,   45,   45,   53,   59,   44,  124,   60,   61,  123,
       49,   63,   49,   52,   87,   52,   53,   59,   53,   59,
       60,   61,   60,   61,   63,   90,   63,   87,  120,   60,
       53,   59,   71,   52,  119,  116,   72,  115,   90,   61,
       62,   63,  112,   81,  111,   71,  109,   71,  106,   72,

       78,   72,   97,   62,   79,   62,   81,   71,   81,   80,
       62,   72,   82,   78,   95,   78,   62,   79,   78,   79,
       83,   62,   80,   89,   80,   82,   79,   82,   84,   89,
       94,   80,   93,   83,   89,   83,   92,   82,   91,   88,
       84,   84,   92,   84,   85,   85,   85,   92,   98,   99,
       83,   77,  100,  101,   98,   99,  100,   98,  100,   98,
       99,  102,  114,  100,  114,  101,  103,  102,  114,   85,
       76,  101,  102,  114,  103,  101,  101,  104,  104,  104,
      103,  107,   75,  108,  113,  103,  107,  107,  108,  108,
      113,  117,  107,  118,  108,  113,   74,  117,  113,  118,

       73,  117,  117,  118,  118,  121,  117,   70,  118,  122,
       65,  121,  136,  136,  136,  122,  121,  125,  122,  125,
      122,  129,   57,  125,  126,  132,  126,  129,  125,  133,
      126,   56,  129,   55,   50,  126,   39,  136,  132,   37,
      132,   32,  133,   21,  133,  144,  144,  144,  144,  144,
      144,  144,  144,  145,  145,  145,  145,  145,  145,  145,
      145,  146,  146,   19,   12,    7,    0,  146,  147,    0,
      147,  147,    0,  147,  147,  148,  148,    0,    0,  148,
      149,  149,    0,  149,  149,  149,  149,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143
    } ;

/* Table of booleans, true if rule could match eol. */
static lp_yyconst flex_int32_t lp_yy_rule_can_match_eol[34] =
    {   0,
0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define lp_yymore() lp_yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/*
   made reentrant with help of
   http://www.usualcoding.eu/post/2007/09/03/Building-a-reentrant-parser-in-C-with-Flex/Bison
*/
/*
   Note that a minimum version of flex is needed to be able to compile this.
   Older version don't know the reentrant code.
   Version 2.5.4 is not enough. Probably at least v2.5.31 is needed. Tested with v2.5.35
*/
/*
** We want the scanner to be reentrant, therefore generate no global variables.
** That what the 'reentrant' option is for.
** 'bison-bridge' is used to create a bison compatible scanner and share lp_yylval
*/

#define INITIAL 0
#define COMMENT 1
#define LINECOMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct lp_yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE lp_yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *lp_yyin_r, *lp_yyout_r;
    size_t lp_yy_buffer_stack_top; /**< index of top of stack. */
    size_t lp_yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * lp_yy_buffer_stack; /**< Stack as an array. */
    char lp_yy_hold_char;
    int lp_yy_n_chars;
    int lp_yyleng_r;
    char *lp_yy_c_buf_p;
    int lp_yy_init;
    int lp_yy_start;
    int lp_yy_did_buffer_switch_on_eof;
    int lp_yy_start_stack_ptr;
    int lp_yy_start_stack_depth;
    int *lp_yy_start_stack;
    lp_yy_state_type lp_yy_last_accepting_state;
    char* lp_yy_last_accepting_cpos;

    int lp_yylineno_r;
    int lp_yy_flex_debug_r;

    char *lp_yytext_r;
    int lp_yy_more_flag;
    int lp_yy_more_len;

    YYSTYPE * lp_yylval_r;

    }; /* end struct lp_yyguts_t */

static int lp_yy_init_globals (lp_yyscan_t lp_yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define lp_yylval lp_yyg->lp_yylval_r
    
int lp_yylex_init (lp_yyscan_t* scanner);

int lp_yylex_init_extra (YY_EXTRA_TYPE user_defined,lp_yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int lp_yylex_destroy (lp_yyscan_t lp_yyscanner );

int lp_yyget_debug (lp_yyscan_t lp_yyscanner );

void lp_yyset_debug (int debug_flag ,lp_yyscan_t lp_yyscanner );

YY_EXTRA_TYPE lp_yyget_extra (lp_yyscan_t lp_yyscanner );

void lp_yyset_extra (YY_EXTRA_TYPE user_defined ,lp_yyscan_t lp_yyscanner );

FILE *lp_yyget_in (lp_yyscan_t lp_yyscanner );

void lp_yyset_in  (FILE * in_str ,lp_yyscan_t lp_yyscanner );

FILE *lp_yyget_out (lp_yyscan_t lp_yyscanner );

void lp_yyset_out  (FILE * out_str ,lp_yyscan_t lp_yyscanner );

int lp_yyget_leng (lp_yyscan_t lp_yyscanner );

char *lp_yyget_text (lp_yyscan_t lp_yyscanner );

int lp_yyget_lineno (lp_yyscan_t lp_yyscanner );

void lp_yyset_lineno (int line_number ,lp_yyscan_t lp_yyscanner );

YYSTYPE * lp_yyget_lval (lp_yyscan_t lp_yyscanner );

void lp_yyset_lval (YYSTYPE * lp_yylval_param ,lp_yyscan_t lp_yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int lp_yywrap (lp_yyscan_t lp_yyscanner );
#else
extern int lp_yywrap (lp_yyscan_t lp_yyscanner );
#endif
#endif

    static void lp_yyunput (int c,char *buf_ptr  ,lp_yyscan_t lp_yyscanner);
    
#ifndef lp_yytext_ptr
static void lp_yy_flex_strncpy (char *,lp_yyconst char *,int ,lp_yyscan_t lp_yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int lp_yy_flex_strlen (lp_yyconst char * ,lp_yyscan_t lp_yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int lp_yyinput (lp_yyscan_t lp_yyscanner );
#else
static int input (lp_yyscan_t lp_yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( lp_yytext, lp_yyleng, 1, lp_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->lp_yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( lp_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( lp_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, lp_yyin))==0 && ferror(lp_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(lp_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "lp_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef lp_yyterminate
#define lp_yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) lp_yy_fatal_error( msg , lp_yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int lp_yylex \
               (YYSTYPE * lp_yylval_param ,lp_yyscan_t lp_yyscanner);

#define YY_DECL int lp_yylex \
               (YYSTYPE * lp_yylval_param , lp_yyscan_t lp_yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after lp_yytext and lp_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( lp_yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->lp_yy_at_bol = \
				(lp_yytext[lp_yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register lp_yy_state_type lp_yy_current_state;
	register char *lp_yy_cp, *lp_yy_bp;
	register int lp_yy_act;
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

    lp_yylval = lp_yylval_param;

	if ( !lp_yyg->lp_yy_init )
		{
		lp_yyg->lp_yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! lp_yyg->lp_yy_start )
			lp_yyg->lp_yy_start = 1;	/* first start state */

		if ( ! lp_yyin )
			lp_yyin = stdin;

		if ( ! lp_yyout )
			lp_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			lp_yyensure_buffer_stack (lp_yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				lp_yy_create_buffer(lp_yyin,YY_BUF_SIZE ,lp_yyscanner);
		}

		lp_yy_load_buffer_state(lp_yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		lp_yy_cp = lp_yyg->lp_yy_c_buf_p;

		/* Support of lp_yytext. */
		*lp_yy_cp = lp_yyg->lp_yy_hold_char;

		/* lp_yy_bp points to the position in lp_yy_ch_buf of the start of
		 * the current run.
		 */
		lp_yy_bp = lp_yy_cp;

		lp_yy_current_state = lp_yyg->lp_yy_start;
		lp_yy_current_state += YY_AT_BOL();
lp_yy_match:
		do
			{
			register YY_CHAR lp_yy_c = lp_yy_ec[YY_SC_TO_UI(*lp_yy_cp)];
			if ( lp_yy_accept[lp_yy_current_state] )
				{
				lp_yyg->lp_yy_last_accepting_state = lp_yy_current_state;
				lp_yyg->lp_yy_last_accepting_cpos = lp_yy_cp;
				}
			while ( lp_yy_chk[lp_yy_base[lp_yy_current_state] + lp_yy_c] != lp_yy_current_state )
				{
				lp_yy_current_state = (int) lp_yy_def[lp_yy_current_state];
				if ( lp_yy_current_state >= 144 )
					lp_yy_c = lp_yy_meta[(unsigned int) lp_yy_c];
				}
			lp_yy_current_state = lp_yy_nxt[lp_yy_base[lp_yy_current_state] + (unsigned int) lp_yy_c];
			++lp_yy_cp;
			}
		while ( lp_yy_base[lp_yy_current_state] != 388 );

lp_yy_find_action:
		lp_yy_act = lp_yy_accept[lp_yy_current_state];
		if ( lp_yy_act == 0 )
			{ /* have to back up */
			lp_yy_cp = lp_yyg->lp_yy_last_accepting_cpos;
			lp_yy_current_state = lp_yyg->lp_yy_last_accepting_state;
			lp_yy_act = lp_yy_accept[lp_yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( lp_yy_act != YY_END_OF_BUFFER && lp_yy_rule_can_match_eol[lp_yy_act] )
			{
			int lp_yyl;
			for ( lp_yyl = 0; lp_yyl < lp_yyleng; ++lp_yyl )
				if ( lp_yytext[lp_yyl] == '\n' )
					   
    do{ lp_yylineno++;
        lp_yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( lp_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*lp_yy_cp = lp_yyg->lp_yy_hold_char;
			lp_yy_cp = lp_yyg->lp_yy_last_accepting_cpos;
			lp_yy_current_state = lp_yyg->lp_yy_last_accepting_state;
			goto lp_yy_find_action;

case 1:
YY_RULE_SETUP
{
  BEGIN COMMENT;
} /* begin skip comment */
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  BEGIN INITIAL;
} /* end skip comment */
	YY_BREAK
case 3:
YY_RULE_SETUP
{
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
{
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  BEGIN LINECOMMENT;
} /* begin skip LINECOMMENT */
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
  BEGIN INITIAL;
} /* end skip LINECOMMENT */
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  BEGIN INITIAL;
} /* end skip LINECOMMENT */
	YY_BREAK
case 9:
YY_RULE_SETUP
{
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lp_yylineno;
  return(COMMA);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lp_yylineno;
  return(MINIMISE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lp_yylineno;
  return(MAXIMISE);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  pv->f = atof((char *)lp_yytext);
  return(INTCONS);
} /* f contains the last float */
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  pv->f = atof((char *)lp_yytext);
  return(CONS);
} /* f contains the last float */
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;
  char *ptr, c;

  pp->lineno = lp_yylineno;
  pv->f = DEF_INFINITE;
  pv->Sign = 0;
  ptr = (char *)lp_yytext;
  while (isspace(*ptr)) ptr++;
  if(*ptr == '-')
    pv->Sign = 1;
  if(lp_yyleng > 0) {
    c = lp_yytext[lp_yyleng - 1];
    if(!isalnum(c))
      unput(c);
  }
  return(INF);
} /* f contains the last float */
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;
  int x;

  pp->lineno = lp_yylineno;
  pv->Sign = 0;
  for(x = 0; x < lp_yyleng; x++)
    if(lp_yytext[x] == '-' || lp_yytext[x] == '+')
      pv->Sign = (pv->Sign == (lp_yytext[x] == '+'));
  return (TOK_SIGN);
  /* Sign is TRUE if the sign-string
     represents a '-'. Otherwise Sign
     is FALSE */
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  if((!pv->Within_int_decl) && (!pv->Within_sec_decl) && (!pv->Within_sos_decl) && (!pv->Within_free_decl)) {
    pv->Within_int_decl = 1;
    pv->Within_sos_decl1 = FALSE;
  }
  return(SEC_INT);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  if((!pv->Within_int_decl) && (!pv->Within_sec_decl) && (!pv->Within_sos_decl) && (!pv->Within_free_decl)) {
    pv->Within_int_decl = 2;
    pv->Within_sos_decl1 = FALSE;
  }
  return(SEC_BIN);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  if((!pv->Within_int_decl) && (!pv->Within_sec_decl) && (!pv->Within_sos_decl) && (!pv->Within_free_decl)) {
    pv->Within_sec_decl = TRUE;
    pv->Within_sos_decl1 = FALSE;
  }
  return(SEC_SEC);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  if(!pv->Within_sos_decl)
    pv->SOStype0 = (short)atoi(((char *)lp_yytext) + 3);
  if((!pv->Within_int_decl) && (!pv->Within_sec_decl) && (!pv->Within_sos_decl) && (!pv->Within_free_decl))
    pv->Within_sos_decl = TRUE;
  return(SEC_SOS);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  FREE(pv->Last_var);
  pv->Last_var = strdup((char *)lp_yytext);
  pv->Last_var[strlen(pv->Last_var) - 2] = 0;
  return(SOSDESCR);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  if((!pv->Within_int_decl) && (!pv->Within_sec_decl) && (!pv->Within_sos_decl) && (!pv->Within_free_decl)) {
    pv->Within_free_decl = TRUE;
    pv->Within_sos_decl1 = FALSE;
  }
  return(SEC_FREE);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;
  char *ptr;

  pp->lineno = lp_yylineno;
  FREE(pv->Last_var);
  pv->Last_var = strdup((char *)lp_yytext);
  ptr = pv->Last_var + strlen(pv->Last_var);
  ptr[-1] = ' ';
  while ((--ptr >= pv->Last_var) && (isspace(*ptr)))
    *ptr = 0;
  return(VARIABLECOLON);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  FREE(pv->Last_var);
  pv->Last_var = strdup((char *)lp_yytext);
  return(VAR);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lp_yylineno;
  return (COLON);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lp_yylineno;
  return(AR_M_OP);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  pv->OP = *lp_yytext;
  return(RE_OPEQ);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  pv->OP = *lp_yytext;
  return(RE_OPLE);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  pv->OP = *lp_yytext;
  return(RE_OPGE);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lp_yylineno;
  pv->Within_int_decl = pv->Within_sec_decl = pv->Within_sos_decl = pv->Within_free_decl = FALSE;
  check_int_sec_sos_free_decl(pp, (int) pv->Within_int_decl, (int) pv->Within_sec_decl, (int) pv->Within_sos_decl, (int) pv->Within_free_decl);
  return(END_C);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lp_yylineno;
  report(NULL, CRITICAL, "LEX ERROR : %s lineno %d\n", lp_yytext, lp_yylineno);
  return(UNDEFINED);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(LINECOMMENT):
	lp_yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int lp_yy_amount_of_matched_text = (int) (lp_yy_cp - lp_yyg->lp_yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*lp_yy_cp = lp_yyg->lp_yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->lp_yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed lp_yyin at a new source and called
			 * lp_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			lp_yyg->lp_yy_n_chars = YY_CURRENT_BUFFER_LVALUE->lp_yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->lp_yy_input_file = lp_yyin;
			YY_CURRENT_BUFFER_LVALUE->lp_yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for lp_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since lp_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( lp_yyg->lp_yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[lp_yyg->lp_yy_n_chars] )
			{ /* This was really a NUL. */
			lp_yy_state_type lp_yy_next_state;

			lp_yyg->lp_yy_c_buf_p = lp_yyg->lp_yytext_ptr + lp_yy_amount_of_matched_text;

			lp_yy_current_state = lp_yy_get_previous_state( lp_yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * lp_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			lp_yy_next_state = lp_yy_try_NUL_trans( lp_yy_current_state , lp_yyscanner);

			lp_yy_bp = lp_yyg->lp_yytext_ptr + YY_MORE_ADJ;

			if ( lp_yy_next_state )
				{
				/* Consume the NUL. */
				lp_yy_cp = ++lp_yyg->lp_yy_c_buf_p;
				lp_yy_current_state = lp_yy_next_state;
				goto lp_yy_match;
				}

			else
				{
				lp_yy_cp = lp_yyg->lp_yy_c_buf_p;
				goto lp_yy_find_action;
				}
			}

		else switch ( lp_yy_get_next_buffer( lp_yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				lp_yyg->lp_yy_did_buffer_switch_on_eof = 0;

				if ( lp_yywrap(lp_yyscanner ) )
					{
					/* Note: because we've taken care in
					 * lp_yy_get_next_buffer() to have set up
					 * lp_yytext, we can now set up
					 * lp_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					lp_yyg->lp_yy_c_buf_p = lp_yyg->lp_yytext_ptr + YY_MORE_ADJ;

					lp_yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! lp_yyg->lp_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				lp_yyg->lp_yy_c_buf_p =
					lp_yyg->lp_yytext_ptr + lp_yy_amount_of_matched_text;

				lp_yy_current_state = lp_yy_get_previous_state( lp_yyscanner );

				lp_yy_cp = lp_yyg->lp_yy_c_buf_p;
				lp_yy_bp = lp_yyg->lp_yytext_ptr + YY_MORE_ADJ;
				goto lp_yy_match;

			case EOB_ACT_LAST_MATCH:
				lp_yyg->lp_yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[lp_yyg->lp_yy_n_chars];

				lp_yy_current_state = lp_yy_get_previous_state( lp_yyscanner );

				lp_yy_cp = lp_yyg->lp_yy_c_buf_p;
				lp_yy_bp = lp_yyg->lp_yytext_ptr + YY_MORE_ADJ;
				goto lp_yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of lp_yylex */

/* lp_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int lp_yy_get_next_buffer (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf;
	register char *source = lp_yyg->lp_yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( lp_yyg->lp_yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[lp_yyg->lp_yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->lp_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( lp_yyg->lp_yy_c_buf_p - lp_yyg->lp_yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (lp_yyg->lp_yy_c_buf_p - lp_yyg->lp_yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->lp_yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->lp_yy_n_chars = lp_yyg->lp_yy_n_chars = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->lp_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int lp_yy_c_buf_p_offset =
				(int) (lp_yyg->lp_yy_c_buf_p - b->lp_yy_ch_buf);

			if ( b->lp_yy_is_our_buffer )
				{
				size_t new_size = b->lp_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->lp_yy_buf_size += b->lp_yy_buf_size / 8;
				else
					b->lp_yy_buf_size *= 2;

				b->lp_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					lp_yyrealloc((void *) b->lp_yy_ch_buf,b->lp_yy_buf_size + 2 ,lp_yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->lp_yy_ch_buf = 0;

			if ( ! b->lp_yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			lp_yyg->lp_yy_c_buf_p = &b->lp_yy_ch_buf[lp_yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->lp_yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[number_to_move]),
			lp_yyg->lp_yy_n_chars, (int) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->lp_yy_n_chars = lp_yyg->lp_yy_n_chars;
		}

	if ( lp_yyg->lp_yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			lp_yyrestart(lp_yyin  ,lp_yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->lp_yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((lp_yy_size_t) (lp_yyg->lp_yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->lp_yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		lp_yy_size_t new_size = lp_yyg->lp_yy_n_chars + number_to_move + (lp_yyg->lp_yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf = (char *) lp_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf,new_size ,lp_yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in lp_yy_get_next_buffer()" );
	}

	lp_yyg->lp_yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[lp_yyg->lp_yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[lp_yyg->lp_yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	lp_yyg->lp_yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[0];

	return ret_val;
}

/* lp_yy_get_previous_state - get the state just before the EOB char was reached */

    static lp_yy_state_type lp_yy_get_previous_state (lp_yyscan_t lp_yyscanner)
{
	register lp_yy_state_type lp_yy_current_state;
	register char *lp_yy_cp;
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

	lp_yy_current_state = lp_yyg->lp_yy_start;
	lp_yy_current_state += YY_AT_BOL();

	for ( lp_yy_cp = lp_yyg->lp_yytext_ptr + YY_MORE_ADJ; lp_yy_cp < lp_yyg->lp_yy_c_buf_p; ++lp_yy_cp )
		{
		register YY_CHAR lp_yy_c = (*lp_yy_cp ? lp_yy_ec[YY_SC_TO_UI(*lp_yy_cp)] : 1);
		if ( lp_yy_accept[lp_yy_current_state] )
			{
			lp_yyg->lp_yy_last_accepting_state = lp_yy_current_state;
			lp_yyg->lp_yy_last_accepting_cpos = lp_yy_cp;
			}
		while ( lp_yy_chk[lp_yy_base[lp_yy_current_state] + lp_yy_c] != lp_yy_current_state )
			{
			lp_yy_current_state = (int) lp_yy_def[lp_yy_current_state];
			if ( lp_yy_current_state >= 144 )
				lp_yy_c = lp_yy_meta[(unsigned int) lp_yy_c];
			}
		lp_yy_current_state = lp_yy_nxt[lp_yy_base[lp_yy_current_state] + (unsigned int) lp_yy_c];
		}

	return lp_yy_current_state;
}

/* lp_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = lp_yy_try_NUL_trans( current_state );
 */
    static lp_yy_state_type lp_yy_try_NUL_trans  (lp_yy_state_type lp_yy_current_state , lp_yyscan_t lp_yyscanner)
{
	register int lp_yy_is_jam;
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner; /* This var may be unused depending upon options. */
	register char *lp_yy_cp = lp_yyg->lp_yy_c_buf_p;

	register YY_CHAR lp_yy_c = 1;
	if ( lp_yy_accept[lp_yy_current_state] )
		{
		lp_yyg->lp_yy_last_accepting_state = lp_yy_current_state;
		lp_yyg->lp_yy_last_accepting_cpos = lp_yy_cp;
		}
	while ( lp_yy_chk[lp_yy_base[lp_yy_current_state] + lp_yy_c] != lp_yy_current_state )
		{
		lp_yy_current_state = (int) lp_yy_def[lp_yy_current_state];
		if ( lp_yy_current_state >= 144 )
			lp_yy_c = lp_yy_meta[(unsigned int) lp_yy_c];
		}
	lp_yy_current_state = lp_yy_nxt[lp_yy_base[lp_yy_current_state] + (unsigned int) lp_yy_c];
	lp_yy_is_jam = (lp_yy_current_state == 143);

	return lp_yy_is_jam ? 0 : lp_yy_current_state;
}

    static void lp_yyunput (int c, register char * lp_yy_bp , lp_yyscan_t lp_yyscanner)
{
	register char *lp_yy_cp;
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

    lp_yy_cp = lp_yyg->lp_yy_c_buf_p;

	/* undo effects of setting up lp_yytext */
	*lp_yy_cp = lp_yyg->lp_yy_hold_char;

	if ( lp_yy_cp < YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = lp_yyg->lp_yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->lp_yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf )
			*--dest = *--source;

		lp_yy_cp += (int) (dest - source);
		lp_yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->lp_yy_n_chars =
			lp_yyg->lp_yy_n_chars = (int)YY_CURRENT_BUFFER_LVALUE->lp_yy_buf_size;

		if ( lp_yy_cp < YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--lp_yy_cp = (char) c;

    if ( c == '\n' ){
        --lp_yylineno;
    }

	lp_yyg->lp_yytext_ptr = lp_yy_bp;
	lp_yyg->lp_yy_hold_char = *lp_yy_cp;
	lp_yyg->lp_yy_c_buf_p = lp_yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int lp_yyinput (lp_yyscan_t lp_yyscanner)
#else
    static int input  (lp_yyscan_t lp_yyscanner)
#endif

{
	int c;
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

	*lp_yyg->lp_yy_c_buf_p = lp_yyg->lp_yy_hold_char;

	if ( *lp_yyg->lp_yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* lp_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( lp_yyg->lp_yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->lp_yy_ch_buf[lp_yyg->lp_yy_n_chars] )
			/* This was really a NUL. */
			*lp_yyg->lp_yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int)(lp_yyg->lp_yy_c_buf_p - lp_yyg->lp_yytext_ptr);
			++lp_yyg->lp_yy_c_buf_p;

			switch ( lp_yy_get_next_buffer( lp_yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because lp_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					lp_yyrestart(lp_yyin ,lp_yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( lp_yywrap(lp_yyscanner ) )
						return EOF;

					if ( ! lp_yyg->lp_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return lp_yyinput(lp_yyscanner);
#else
					return input(lp_yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					lp_yyg->lp_yy_c_buf_p = lp_yyg->lp_yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) lp_yyg->lp_yy_c_buf_p;	/* cast for 8-bit char's */
	*lp_yyg->lp_yy_c_buf_p = '\0';	/* preserve lp_yytext */
	lp_yyg->lp_yy_hold_char = *++lp_yyg->lp_yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->lp_yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->lp_yy_at_bol )
		   
    do{ lp_yylineno++;
        lp_yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param lp_yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void lp_yyrestart  (FILE * input_file , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        lp_yyensure_buffer_stack (lp_yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            lp_yy_create_buffer(lp_yyin,YY_BUF_SIZE ,lp_yyscanner);
	}

	lp_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,lp_yyscanner);
	lp_yy_load_buffer_state(lp_yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param lp_yyscanner The scanner object.
 */
    void lp_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		lp_yypop_buffer_state();
	 *		lp_yypush_buffer_state(new_buffer);
     */
	lp_yyensure_buffer_stack (lp_yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*lp_yyg->lp_yy_c_buf_p = lp_yyg->lp_yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->lp_yy_buf_pos = lp_yyg->lp_yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->lp_yy_n_chars = lp_yyg->lp_yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	lp_yy_load_buffer_state(lp_yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (lp_yywrap()) processing, but the only time this flag
	 * is looked at is after lp_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	lp_yyg->lp_yy_did_buffer_switch_on_eof = 1;
}

static void lp_yy_load_buffer_state  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
	lp_yyg->lp_yy_n_chars = YY_CURRENT_BUFFER_LVALUE->lp_yy_n_chars;
	lp_yyg->lp_yytext_ptr = lp_yyg->lp_yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->lp_yy_buf_pos;
	lp_yyin = YY_CURRENT_BUFFER_LVALUE->lp_yy_input_file;
	lp_yyg->lp_yy_hold_char = *lp_yyg->lp_yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param lp_yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE lp_yy_create_buffer  (FILE * file, int  size , lp_yyscan_t lp_yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) lp_yyalloc(sizeof( struct lp_yy_buffer_state ) ,lp_yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lp_yy_create_buffer()" );

	b->lp_yy_buf_size = size;

	/* lp_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->lp_yy_ch_buf = (char *) lp_yyalloc(b->lp_yy_buf_size + 2 ,lp_yyscanner );
	if ( ! b->lp_yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in lp_yy_create_buffer()" );

	b->lp_yy_is_our_buffer = 1;

	lp_yy_init_buffer(b,file ,lp_yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with lp_yy_create_buffer()
 * @param lp_yyscanner The scanner object.
 */
    void lp_yy_delete_buffer (YY_BUFFER_STATE  b , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->lp_yy_is_our_buffer )
		lp_yyfree((void *) b->lp_yy_ch_buf ,lp_yyscanner );

	lp_yyfree((void *) b ,lp_yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a lp_yyrestart() or at EOF.
 */
    static void lp_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , lp_yyscan_t lp_yyscanner)

{
	int oerrno = errno;
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

	lp_yy_flush_buffer(b ,lp_yyscanner);

	b->lp_yy_input_file = file;
	b->lp_yy_fill_buffer = 1;

    /* If b is the current buffer, then lp_yy_init_buffer was _probably_
     * called from lp_yyrestart() or through lp_yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->lp_yy_bs_lineno = 1;
        b->lp_yy_bs_column = 0;
    }

        b->lp_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param lp_yyscanner The scanner object.
 */
    void lp_yy_flush_buffer (YY_BUFFER_STATE  b , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
	if ( ! b )
		return;

	b->lp_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->lp_yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->lp_yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->lp_yy_buf_pos = &b->lp_yy_ch_buf[0];

	b->lp_yy_at_bol = 1;
	b->lp_yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		lp_yy_load_buffer_state(lp_yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param lp_yyscanner The scanner object.
 */
void lp_yypush_buffer_state (YY_BUFFER_STATE new_buffer , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
	if (new_buffer == NULL)
		return;

	lp_yyensure_buffer_stack(lp_yyscanner);

	/* This block is copied from lp_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*lp_yyg->lp_yy_c_buf_p = lp_yyg->lp_yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->lp_yy_buf_pos = lp_yyg->lp_yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->lp_yy_n_chars = lp_yyg->lp_yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		lp_yyg->lp_yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from lp_yy_switch_to_buffer. */
	lp_yy_load_buffer_state(lp_yyscanner );
	lp_yyg->lp_yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param lp_yyscanner The scanner object.
 */
void lp_yypop_buffer_state (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	lp_yy_delete_buffer(YY_CURRENT_BUFFER ,lp_yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (lp_yyg->lp_yy_buffer_stack_top > 0)
		--lp_yyg->lp_yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		lp_yy_load_buffer_state(lp_yyscanner );
		lp_yyg->lp_yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void lp_yyensure_buffer_stack (lp_yyscan_t lp_yyscanner)
{
	int num_to_alloc;
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

	if (!lp_yyg->lp_yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		lp_yyg->lp_yy_buffer_stack = (struct lp_yy_buffer_state**)lp_yyalloc
								(num_to_alloc * sizeof(struct lp_yy_buffer_state*)
								, lp_yyscanner);
		if ( ! lp_yyg->lp_yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in lp_yyensure_buffer_stack()" );
								  
		memset(lp_yyg->lp_yy_buffer_stack, 0, num_to_alloc * sizeof(struct lp_yy_buffer_state*));
				
		lp_yyg->lp_yy_buffer_stack_max = num_to_alloc;
		lp_yyg->lp_yy_buffer_stack_top = 0;
		return;
	}

	if (lp_yyg->lp_yy_buffer_stack_top >= (lp_yyg->lp_yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (int)lp_yyg->lp_yy_buffer_stack_max + grow_size;
		lp_yyg->lp_yy_buffer_stack = (struct lp_yy_buffer_state**)lp_yyrealloc
								(lp_yyg->lp_yy_buffer_stack,
								num_to_alloc * sizeof(struct lp_yy_buffer_state*)
								, lp_yyscanner);
		if ( ! lp_yyg->lp_yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in lp_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(lp_yyg->lp_yy_buffer_stack + lp_yyg->lp_yy_buffer_stack_max, 0, grow_size * sizeof(struct lp_yy_buffer_state*));
		lp_yyg->lp_yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param lp_yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE lp_yy_scan_buffer  (char * base, lp_yy_size_t  size , lp_yyscan_t lp_yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) lp_yyalloc(sizeof( struct lp_yy_buffer_state ) ,lp_yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lp_yy_scan_buffer()" );

	b->lp_yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->lp_yy_buf_pos = b->lp_yy_ch_buf = base;
	b->lp_yy_is_our_buffer = 0;
	b->lp_yy_input_file = 0;
	b->lp_yy_n_chars = (int)b->lp_yy_buf_size;
	b->lp_yy_is_interactive = 0;
	b->lp_yy_at_bol = 1;
	b->lp_yy_fill_buffer = 0;
	b->lp_yy_buffer_status = YY_BUFFER_NEW;

	lp_yy_switch_to_buffer(b ,lp_yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to lp_yylex() will
 * scan from a @e copy of @a str.
 * @param lp_yystr a NUL-terminated string to scan
 * @param lp_yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       lp_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE lp_yy_scan_string (lp_yyconst char * lp_yystr , lp_yyscan_t lp_yyscanner)
{
    
	return lp_yy_scan_bytes(lp_yystr, (int)strlen(lp_yystr), lp_yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to lp_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param lp_yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE lp_yy_scan_bytes  (lp_yyconst char * lp_yybytes, int  _lp_yybytes_len , lp_yyscan_t lp_yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	lp_yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _lp_yybytes_len + 2;
	buf = (char *) lp_yyalloc(n ,lp_yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in lp_yy_scan_bytes()" );

	for ( i = 0; i < _lp_yybytes_len; ++i )
		buf[i] = lp_yybytes[i];

	buf[_lp_yybytes_len] = buf[_lp_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = lp_yy_scan_buffer(buf,n ,lp_yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in lp_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->lp_yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void lp_yy_fatal_error (lp_yyconst char* msg , lp_yyscan_t lp_yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine lp_yyless() so it works in section 3 code. */

#undef lp_yyless
#define lp_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up lp_yytext. */ \
        int lp_yyless_macro_arg = (n); \
        YY_LESS_LINENO(lp_yyless_macro_arg);\
		lp_yytext[lp_yyleng] = lp_yyg->lp_yy_hold_char; \
		lp_yyg->lp_yy_c_buf_p = lp_yytext + lp_yyless_macro_arg; \
		lp_yyg->lp_yy_hold_char = *lp_yyg->lp_yy_c_buf_p; \
		*lp_yyg->lp_yy_c_buf_p = '\0'; \
		lp_yyleng = lp_yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param lp_yyscanner The scanner object.
 */
YY_EXTRA_TYPE lp_yyget_extra  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    return lp_yyextra;
}

/** Get the current line number.
 * @param lp_yyscanner The scanner object.
 */
int lp_yyget_lineno  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return lp_yylineno;
}

/** Get the current column number.
 * @param lp_yyscanner The scanner object.
 */
int lp_yyget_column  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return lp_yycolumn;
}

/** Get the input stream.
 * @param lp_yyscanner The scanner object.
 */
FILE *lp_yyget_in  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    return lp_yyin;
}

/** Get the output stream.
 * @param lp_yyscanner The scanner object.
 */
FILE *lp_yyget_out  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    return lp_yyout;
}

/** Get the length of the current token.
 * @param lp_yyscanner The scanner object.
 */
int lp_yyget_leng  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    return lp_yyleng;
}

/** Get the current token.
 * @param lp_yyscanner The scanner object.
 */

char *lp_yyget_text  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    return lp_yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param lp_yyscanner The scanner object.
 */
void lp_yyset_extra (YY_EXTRA_TYPE  user_defined , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    lp_yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param lp_yyscanner The scanner object.
 */
void lp_yyset_lineno (int  line_number , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           lp_yy_fatal_error( "lp_yyset_lineno called with no buffer" , lp_yyscanner); 
    
    lp_yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param lp_yyscanner The scanner object.
 */
void lp_yyset_column (int  column_no , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           lp_yy_fatal_error( "lp_yyset_column called with no buffer" , lp_yyscanner); 
    
    lp_yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param lp_yyscanner The scanner object.
 * @see lp_yy_switch_to_buffer
 */
void lp_yyset_in (FILE *  in_str , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    lp_yyin = in_str ;
}

void lp_yyset_out (FILE *  out_str , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    lp_yyout = out_str ;
}

int lp_yyget_debug  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    return lp_yy_flex_debug;
}

void lp_yyset_debug (int  bdebug , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    lp_yy_flex_debug = bdebug ;
}

/* Accessor methods for lp_yylval and lp_yylloc */

YYSTYPE * lp_yyget_lval  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    return lp_yylval;
}

void lp_yyset_lval (YYSTYPE *  lp_yylval_param , lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    lp_yylval = lp_yylval_param;
}

/* User-visible API */

/* lp_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int lp_yylex_init(lp_yyscan_t* ptr_lp_yy_globals)

{
    if (ptr_lp_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_lp_yy_globals = (lp_yyscan_t) lp_yyalloc ( sizeof( struct lp_yyguts_t ), NULL );

    if (*ptr_lp_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in lp_yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_lp_yy_globals,0x00,sizeof(struct lp_yyguts_t));

    return lp_yy_init_globals ( *ptr_lp_yy_globals );
}

/* lp_yylex_init_extra has the same functionality as lp_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to lp_yyalloc in
 * the lp_yyextra field.
 */

int lp_yylex_init_extra(YY_EXTRA_TYPE lp_yy_user_defined,lp_yyscan_t* ptr_lp_yy_globals )

{
    struct lp_yyguts_t dummy_lp_yyguts;

    lp_yyset_extra (lp_yy_user_defined, &dummy_lp_yyguts);

    if (ptr_lp_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_lp_yy_globals = (lp_yyscan_t) lp_yyalloc ( sizeof( struct lp_yyguts_t ), &dummy_lp_yyguts );
	
    if (*ptr_lp_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    lp_yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_lp_yy_globals,0x00,sizeof(struct lp_yyguts_t));
    
    lp_yyset_extra (lp_yy_user_defined, *ptr_lp_yy_globals);
    
    return lp_yy_init_globals ( *ptr_lp_yy_globals );
}

static int lp_yy_init_globals (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from lp_yylex_destroy(), so don't allocate here.
     */

    lp_yyg->lp_yy_buffer_stack = 0;
    lp_yyg->lp_yy_buffer_stack_top = 0;
    lp_yyg->lp_yy_buffer_stack_max = 0;
    lp_yyg->lp_yy_c_buf_p = (char *) 0;
    lp_yyg->lp_yy_init = 0;
    lp_yyg->lp_yy_start = 0;

    lp_yyg->lp_yy_start_stack_ptr = 0;
    lp_yyg->lp_yy_start_stack_depth = 0;
    lp_yyg->lp_yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    lp_yyin = stdin;
    lp_yyout = stdout;
#else
    lp_yyin = (FILE *) 0;
    lp_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * lp_yylex_init()
     */
    return 0;
}

/* lp_yylex_destroy is for both reentrant and non-reentrant scanners. */
int lp_yylex_destroy  (lp_yyscan_t lp_yyscanner)
{
    struct lp_yyguts_t * lp_yyg = (struct lp_yyguts_t*)lp_yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		lp_yy_delete_buffer(YY_CURRENT_BUFFER ,lp_yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		lp_yypop_buffer_state(lp_yyscanner);
	}

	/* Destroy the stack itself. */
	lp_yyfree(lp_yyg->lp_yy_buffer_stack ,lp_yyscanner);
	lp_yyg->lp_yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        lp_yyfree(lp_yyg->lp_yy_start_stack ,lp_yyscanner );
        lp_yyg->lp_yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * lp_yylex() is called, initialization will occur. */
    lp_yy_init_globals( lp_yyscanner);

    /* Destroy the main struct (reentrant only). */
    lp_yyfree ( lp_yyscanner , lp_yyscanner );
    lp_yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef lp_yytext_ptr
static void lp_yy_flex_strncpy (char* s1, lp_yyconst char * s2, int n , lp_yyscan_t lp_yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int lp_yy_flex_strlen (lp_yyconst char * s , lp_yyscan_t lp_yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *lp_yyalloc (lp_yy_size_t  size , lp_yyscan_t lp_yyscanner)
{
	return (void *) malloc( size );
}

void *lp_yyrealloc  (void * ptr, lp_yy_size_t  size , lp_yyscan_t lp_yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void lp_yyfree (void * ptr , lp_yyscan_t lp_yyscanner)
{
	free( (char *) ptr );	/* see lp_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "lp_yytables"

