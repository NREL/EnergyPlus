import unittest
from pathlib import Path

from argparse import Namespace
import tempfile
import json
from . import BaseTest
from src.main import main

test_dir = Path(__file__).parent.parent

minimum_objects_d = {
    "Building": {
        "Test Building": {}
    },
    "GlobalGeometryRules": {
        "GlobalGeometryRules 1": {
            "coordinate_system": "Relative",
            "starting_vertex_position": "UpperLeftCorner",
            "vertex_entry_direction": "Counterclockwise"
        }
    }
}

hot_water_loop = {
    "HVACTemplate:Plant:HotWaterLoop": {
        "Hot Water Loop": {
            "hot_water_design_setpoint": 82,
            "hot_water_plant_operation_scheme_type": "Default",
            "hot_water_pump_configuration": "ConstantFlow",
            "hot_water_pump_rated_head": 179352,
            "hot_water_reset_outdoor_dry_bulb_high": 10,
            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
            "pump_control_type": "Intermittent"
        }
    }
}

chilled_water_objects = {
    "HVACTemplate:Plant:ChilledWaterLoop": {
        "Chilled Water Loop": {
            "chilled_water_design_setpoint": 7.22,
            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
            "chilled_water_setpoint_reset_type": "None",
            "chiller_plant_operation_scheme_type": "Default",
            "condenser_plant_operation_scheme_type": "Default",
            "condenser_water_design_setpoint": 29.4,
            "condenser_water_pump_rated_head": 179352,
            "minimum_outdoor_dry_bulb_temperature": 7.22,
            "primary_chilled_water_pump_rated_head": 179352,
            "pump_control_type": "Intermittent",
            "secondary_chilled_water_pump_rated_head": 179352
        }
    },
    "HVACTemplate:Plant:Chiller": {
        "Main Chiller": {
            "capacity": "Autosize",
            "chiller_type": "ElectricReciprocatingChiller",
            "condenser_type": "WaterCooled",
            "nominal_cop": 3.2,
            "priority": "1"
        }
    },
    "HVACTemplate:Plant:Tower": {
        "Main Tower": {
            "free_convection_capacity": "Autosize",
            "high_speed_fan_power": "Autosize",
            "high_speed_nominal_capacity": "Autosize",
            "low_speed_fan_power": "Autosize",
            "low_speed_nominal_capacity": "Autosize",
            "priority": "1",
            "tower_type": "SingleSpeed"
        }
    }
}


class TestUserWarnings(BaseTest, unittest.TestCase):
    """
    Test warnings generated by user behaviour
    """
    def setUp(self):
        return

    def tearDown(self):
        return

    def test_invalid_choice(self):
        # This only works if schema validation is turned on.  The point of turning it off is to speed up
        #  the process so no output in that case may be the only option
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:FanCoil": {
                        "FanCoil 1": {}
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Invalid choice in HVACTemplate:Zone:FanCoil .* '
                                                               r'is a required property')
        return

    def test_two_hot_water_loop_templates_with_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:HotWaterLoop": {
                        "Hot Water Loop": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        },
                        "Hot Water Loop 2": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*Input file does not meet schema format')
        return

    def test_two_hot_water_loop_templates_no_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:HotWaterLoop": {
                        "Hot Water Loop": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        },
                        "Hot Water Loop 2": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=True
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*Only one HVACTemplate:Plant:HotWaterLoop.*')
        return

    def test_two_chilled_water_loop_templates_with_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:ChilledWaterLoop": {
                        "Chilled Water Loop": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        },
                        "Chilled Water Loop 2": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*Input file does not meet schema format')
        return

    def test_two_chilled_water_loop_templates_no_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:ChilledWaterLoop": {
                        "Chilled Water Loop": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        },
                        "Chilled Water Loop 2": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=True
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*Only one HVACTemplate:Plant:ChilledWaterLoop.*')
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*You must specify at least one.*')
        return

    def test_two_mixed_water_loop_templates_with_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:MixedWaterLoop": {
                        "Only Water Loop": {
                            "high_temperature_design_setpoint": 30,
                            "low_temperature_design_setpoint": 20,
                            "operation_scheme_type": "Default",
                            "pump_control_type": "Intermittent",
                            "water_pump_configuration": "ConstantFlow",
                            "water_pump_rated_head": 179352
                        },
                        "Only Water Loop 2": {
                            "high_temperature_design_setpoint": 30,
                            "low_temperature_design_setpoint": 20,
                            "operation_scheme_type": "Default",
                            "pump_control_type": "Intermittent",
                            "water_pump_configuration": "ConstantFlow",
                            "water_pump_rated_head": 179352
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*Input file does not meet schema format')
        return

    def test_two_mixed_water_loop_templates_no_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:MixedWaterLoop": {
                        "Only Water Loop": {
                            "high_temperature_design_setpoint": 30,
                            "low_temperature_design_setpoint": 20,
                            "operation_scheme_type": "Default",
                            "pump_control_type": "Intermittent",
                            "water_pump_configuration": "ConstantFlow",
                            "water_pump_rated_head": 179352
                        },
                        "Only Water Loop 2": {
                            "high_temperature_design_setpoint": 30,
                            "low_temperature_design_setpoint": 20,
                            "operation_scheme_type": "Default",
                            "pump_control_type": "Intermittent",
                            "water_pump_configuration": "ConstantFlow",
                            "water_pump_rated_head": 179352
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=True
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*Only one HVACTemplate:Plant:MixedWaterLoop.*')
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*You must specify at least one.*')
        return

    def test_zone_equipment_no_system(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:VAV": {
                        "VAV Zone 1": {
                            "zone_name": 'SPACE1-1',
                            'template_vav_system_name': 'Sys 1'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Could not find air handler name referenced')
        return

    def test_baseboard_hot_water_no_supply_equipment(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:FanCoil": {
                        "FanCoil 1": {
                            "zone_name": 'SPACE1-1',
                            "baseboard_heating_type": 'HotWater',
                            "template_thermostat_name": "All Zones"
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'.*HVACTemplate:Plant:HotWaterLoop and a '
                                                               r'HVACTemplate:Plant:Boiler are needed.*')
        return

    def test_fan_coil_doas_with_constant_fan(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:FanCoil": {
                        "FanCoil 1": {
                            "zone_name": 'SPACE1-1',
                            "capacity_control_method": 'ConstantFanVariableFlow',
                            'dedicated_outdoor_air_system_name': 'DOAS',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    'HVACTemplate:System:DedicatedOutdoorAir': {
                        'DOAS': {}
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Capacity Control Method is')
        return

    def test_ideal_load_flow_heat_limit_flow(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:IdealLoadsAirSystem": {
                        "IL 1": {
                            "zone_name": 'SPACE1-1',
                            "heating_limit": 'LimitFlowRate',
                            'template_thermostat_name': 'All Zones'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Heating Limit field is LimitFlowRate but the '
                                                               r'Maximum Heating Air Flow Rate field')
        return

    def test_ideal_load_flow_cool_limit_flow(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:IdealLoadsAirSystem": {
                        "IL 1": {
                            "zone_name": 'SPACE1-1',
                            "cooling_limit": 'LimitFlowRate',
                            'template_thermostat_name': 'All Zones'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Heating Limit field is LimitFlowRate but the '
                                                               r'Maximum Cooling Air Flow Rate field')
        return

    def test_ideal_load_flow_heat_limit_capacity(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:IdealLoadsAirSystem": {
                        "IL 1": {
                            "zone_name": 'SPACE1-1',
                            "heating_limit": 'LimitCapacity',
                            'template_thermostat_name': 'All Zones'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Heating Limit field is LimitCapacity but the '
                                                               r'Maximum Sensible Heating Capacity field')
        return

    def test_ideal_load_flow_cool_limit_capacity(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:IdealLoadsAirSystem": {
                        "IL 1": {
                            "zone_name": 'SPACE1-1',
                            "cooling_limit": 'LimitCapacity',
                            'template_thermostat_name': 'All Zones'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Cooling Limit field is LimitCapacity but the '
                                                               r'Maximum Total Cooling Capacity field')
        return

    def test_ideal_load_flow_heat_limit_flow_and_capacity(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:IdealLoadsAirSystem": {
                        "IL 1": {
                            "zone_name": 'SPACE1-1',
                            "heating_limit": 'LimitFlowRateAndCapacity',
                            'template_thermostat_name': 'All Zones'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Heating Limit field is LimitFlowRateAndCapacity but '
                                                               r'the Maximum Heating Air Flow Rate field is blank and '
                                                               r'the Maximum Sensible Heating Capacity field is blank.')
        return

    def test_ideal_load_flow_cool_limit_flow_and_capacity(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:IdealLoadsAirSystem": {
                        "IL 1": {
                            "zone_name": 'SPACE1-1',
                            "cooling_limit": 'LimitFlowRateAndCapacity',
                            'template_thermostat_name': 'All Zones'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Cooling Limit field is LimitFlowRateAndCapacity but '
                                                               r'the Maximum Cooling Air Flow Rate field is blank and '
                                                               r'the Maximum Total Cooling Capacity field is blank.')
        return

    def test_vav_heating_cooling_setpoint_mismatch(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'HVACTemplate:Zone:VAV': {
                        'VAV Zone 1': {
                            'zone_name': 'SPACE1-1',
                            'template_vav_system_name': 'VAV Sys 1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:VAV": {
                        "VAV Sys 1": {
                            'cooling_coil_design_setpoint': 12,
                            "heating_coil_type": 'Electric',
                            'heating_coil_design_setpoint': 15,
                            'supply_fan_delta_pressure': 600
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Heating Coil Design Setpoint is greater than '
                                                               r'the Cooling Coil Design Setpoint.')
        return

    def test_cav_heating_cooling_setpoint_mismatch(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:ConstantVolume": {
                        'CV Zone 1': {
                            'template_constant_volume_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:ConstantVolume": {
                        "CV Sys 1": {
                            'cooling_coil_design_setpoint': 12,
                            "heating_coil_type": 'Electric',
                            'heating_coil_design_setpoint': 15
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Heating Coil Design Setpoint is greater than '
                                                               r'the Cooling Coil Design Setpoint.')
        return

    def test_vav_preheating_cooling_setpoint_mismatch(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:VAV": {
                        'VAV Zone 1': {
                            'template_vav_system_name': 'VAV Sys 1',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:VAV": {
                        "VAV Sys 1": {
                            'cooling_coil_design_setpoint': 12,
                            'preheat_coil_type': 'Electric',
                            'preheat_coil_design_setpoint': 15
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Preheat Coil Design Setpoint is greater than '
                                                               r'the Cooling Coil Design Setpoint')
        return

    def test_cav_preheating_cooling_setpoint_mismatch(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:ConstantVolume": {
                        'CV Zone 1': {
                            'template_constant_volume_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:ConstantVolume": {
                        "CV Sys 1": {
                            'cooling_coil_design_setpoint': 12,
                            'preheat_coil_type': 'Electric',
                            'preheat_coil_design_setpoint': 15
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Preheat Coil Design Setpoint is greater than '
                                                               r'the Cooling Coil Design Setpoint')
        return

    def test_vav_preheating_override_setpoint(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:VAV": {
                        'VAV Zone 1': {
                            'template_vav_system_name': 'VAV Sys 1',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:VAV": {
                        "VAV Sys 1": {
                            'heating_coil_design_setpoint': 15,
                            'preheat_coil_type': 'Electric',
                            'preheat_coil_design_setpoint': 7
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Heating Coil Design Setpoint is greater than the '
                                                               r'Preheat Coil Design Setpoint,')
        return

    def test_cav_preheating_override_setpoint(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:ConstantVolume": {
                        'CV Zone 1': {
                            'template_constant_volume_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:ConstantVolume": {
                        "CV Sys 1": {
                            'heating_coil_design_setpoint': 10,
                            'heating_coil_type': 'None',
                            'preheat_coil_type': 'Electric',
                            'preheat_coil_design_setpoint': 7
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Heating Coil Design Setpoint is greater than the '
                                                               r'Preheat Coil Design Setpoint,')
        return

    def test_vav_preheating_override_no_preheat_coil_setpoint(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:VAV": {
                        'VAV Zone 1': {
                            'template_vav_system_name': 'VAV Sys 1',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:VAV": {
                        "VAV Sys 1": {
                            'preheat_coil_type': 'None',
                            'heating_coil_design_setpoint': 2,  # Needs to be specified to override default value
                            'preheat_coil_design_setpoint': 7
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'there is no Heating Coil and no Preheat Coil.')
        return

    def test_unitary_control_zone_no_template(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'HVACTemplate:Zone:Unitary': {
                        'Uniitary Zone 1': {
                            'template_unitary_system_name': 'Unitary Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:Unitary": {
                        "Unitary Sys 1": {
                            'heating_coil_type': 'Electric',
                            'control_zone_or_thermostat_location_name': 'SPACE1-1'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'for the field control_zone_or_thermostat_location_name '
                                                               r'could not find a matching')
        return

    def test_cav_cooling_control_zone_no_template(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'HVACTemplate:Zone:ConstantVolume': {
                        'CV Zone 1': {
                            'template_constant_volume_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:ConstantVolume": {
                        "CV Sys 1": {
                            'heating_coil_type': 'Electric',
                            'cooling_coil_control_zone_name': 'SPACE1-1'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'for the field cooling_coil_control_zone_name '
                                                               r'could not find a matching')
        return

    def test_cav_heating_control_zone_no_template(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'HVACTemplate:Zone:ConstantVolume': {
                        'CV Zone 1': {
                            'template_constant_volume_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:ConstantVolume": {
                        "CV Sys 1": {
                            'heating_coil_type': 'Electric',
                            'heating_coil_control_zone_name': 'SPACE1-1'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'for the field heating_coil_control_zone_name '
                                                               r'could not find a matching')
        return

    def test_vrf_master_thermostat_no_template(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'HVACTemplate:Zone:VRF': {
                        'VRF Zone 1': {
                            'template_vrf_system_name': 'VRF Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:VRF": {
                        "VRF Sys 1": {
                            'master_thermostat_priority_control_type': 'MasterThermostatPriority',
                            'zone_name_for_master_thermostat_location': 'SPACE1-1'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'field Zone Name for Master Thermostat Location could '
                                                               r'not find a matching')
        return

    def test_vrf_master_thermostat_scheduled_no_schedule(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'HVACTemplate:Zone:VRF': {
                        'VRF Zone 1': {
                            'template_vrf_system_name': 'VRF Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:VRF": {
                        "VRF Sys 1": {
                            'master_thermostat_priority_control_type': 'Scheduled',
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Priority Control Type = Scheduled, but the Thermostat '
                                                               r'Priority Schedule Name')
        return

    def test_unitary_control_zone_bad_template(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:Unitary": {
                        'Unitary Zone 1': {
                            'template_unitary_system_name': 'Unitary Sys 1',
                            'zone_name': 'SPACE2-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:Unitary": {
                        "Unitary Sys 1": {
                            'heating_coil_type': 'Electric',
                            'control_zone_or_thermostat_location_name': 'SPACE1-1'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the field control_zone_or_thermostat_location_name '
                                                               r'could not find a matching HVACTemplate:Zone:Unitary')
        return

    def test_night_cycle_control_zone(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    **chilled_water_objects,
                    "HVACTemplate:Thermostat": {
                        "All Zones": {
                            "cooling_setpoint_schedule_name": "Clg-SetP-Sch",
                            "heating_setpoint_schedule_name": "Htg-SetP-Sch"
                        }
                    },
                    "HVACTemplate:Zone:ConstantVolume": {
                        'Unitary Zone 1': {
                            'template_constant_volume_system_name': 'CV Sys 1',
                            "template_thermostat_name": "All Zones",
                            'zone_name': 'SPACE1-1'
                        }
                    },
                    "HVACTemplate:System:ConstantVolume": {
                        "CV Sys 1": {
                            'cooling_coil_type': 'ChilledWater',
                            'cooling_coil_design_setpoint': 12.8,
                            'cooling_coil_setpoint_control_type': 'FixedSetpoint',
                            'heating_coil_type': 'Electric',
                            'heating_coil_setpoint_control_type': 'FixedSetpoint',
                            'heating_coil_design_setpoint': 15,
                            'night_cycle_control': 'CycleOnControlZone'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'A zone name must be specified when Night Cycle Control')
        return

    def test_unitary_system_dx_cooling_coil_sensible_heat_ratio(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    **chilled_water_objects,
                    "HVACTemplate:Zone:Unitary": {
                        'Unitary Zone 1': {
                            'template_unitary_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:UnitarySystem": {
                        "CV Sys 1": {
                            'control_zone_or_thermostat_location_name': 'SPACE1-1',
                            'dx_cooling_coil_gross_rated_sensible_heat_ratio': 0.66
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Cooling Coil Rated Capacity is autosized, so the '
                                                               r'Cooling Coil Gross Rated Sensible Heat Ratio')
        return

    def test_unitary_system_dx_cooling_coil_total_capacity(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    **chilled_water_objects,
                    "HVACTemplate:Zone:Unitary": {
                        'Unitary Zone 1': {
                            'template_unitary_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:UnitarySystem": {
                        "CV Sys 1": {
                            'control_zone_or_thermostat_location_name': 'SPACE1-1',
                            'dx_cooling_coil_gross_rated_total_capacity': 1000
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'he Cooling Coil Rated Capacity will not be used when '
                                                               r'the Cooling Coil Gross Rated ')
        return

    def test_system_with_no_zones(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    **chilled_water_objects,
                    'HVACTemplate:Zone:Unitary': {
                        'Zone 1': {
                            'template_unitary_system_name': 'CV Sys 2',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:UnitarySystem": {
                        "CV Sys 1": {
                            'dx_cooling_coil_gross_rated_total_capacity': 1000
                        },
                        "CV Sys 2": {
                            'dx_cooling_coil_gross_rated_total_capacity': 1000
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Did not find any HVACTemplate:Zone objects connected to')
        return

    def test_object_reference_boiler_no_type(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    **chilled_water_objects,
                    "HVACTemplate:Plant:Boiler:ObjectReference": {
                        "OR 1": {
                            'boiler_name': 'Main Boiler',
                            'boiler_object_type': 'Boiler:HotWater'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'n HVACTemplate:Plant:Boiler:ObjectReference \(OR 1\) '
                                                               r'Referenced boiler not found')
        return

    def test_object_reference_boiler_wrong_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Boiler:HotWater": {
                        'Main Boiler': {
                            'fuel_type': 'Coal',
                            'nominal_thermal_efficiency': 0.8,
                            'boiler_water_inlet_node_name': 'HW In',
                            'boiler_water_outlet_node_name': 'HW Out'
                        }
                    },
                    "HVACTemplate:Plant:Boiler:ObjectReference": {
                        "OR 1": {
                            'boiler_name': 'Bad Boiler',
                            'boiler_object_type': 'Boiler:HotWater'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'HVACTemplate:Plant:Boiler:ObjectReference \(OR 1\) '
                                                               r'Referenced boiler not found')
        return

    def test_object_reference_boiler_no_inlet_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Boiler:HotWater": {
                        'Main Boiler': {
                            'fuel_type': 'Coal',
                            'nominal_thermal_efficiency': 0.8,
                            'boiler_water_inlet_node_name': 'None',
                            'boiler_water_outlet_node_name': 'HW Out'
                        }
                    },
                    "HVACTemplate:Plant:Boiler:ObjectReference": {
                        "OR 1": {
                            'boiler_name': 'Main Boiler',
                            'boiler_object_type': 'Boiler:HotWater'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Blank Inlet Node Name found in referenced boiler: ')
        return

    def test_object_reference_boiler_no_outlet_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Boiler:HotWater": {
                        'Main Boiler': {
                            'fuel_type': 'Coal',
                            'nominal_thermal_efficiency': 0.8,
                            'boiler_water_inlet_node_name': 'HW In',
                            'boiler_water_outlet_node_name': ''
                        }
                    },
                    "HVACTemplate:Plant:Boiler:ObjectReference": {
                        "OR 1": {
                            'boiler_name': 'Main Boiler',
                            'boiler_object_type': 'Boiler:HotWater'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Blank Outlet Node Name found in referenced boiler: ')
        return

    def test_object_reference_boiler_no_duplicate_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Boiler:HotWater": {
                        'Main Boiler': {
                            'fuel_type': 'Coal',
                            'nominal_thermal_efficiency': 0.8,
                            'boiler_water_inlet_node_name': 'HW In',
                            'boiler_water_outlet_node_name': 'HW In'
                        }
                    },
                    "HVACTemplate:Plant:Boiler:ObjectReference": {
                        "OR 1": {
                            'boiler_name': 'Main Boiler',
                            'boiler_object_type': 'Boiler:HotWater'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Duplicate hot water node name found in '
                                                               r'referenced boiler')
        return

    def test_hot_water_loop_no_equipment(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:HotWaterLoop": {
                        "HWL 1": {

                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'There is no demand\-side equipment connected to this '
                                                               r'loop\. There is no supply\-side equipment serving this '
                                                               r'loop\.')
        return

    def test_object_reference_chiller_no_type(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Main Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'n HVACTemplate:Plant:Chiller:ObjectReference \(OR 1\) '
                                                               r'Referenced chiller not found')
        return

    def test_object_reference_chiller_wrong_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Chiller:Electric:EIR": {
                        'Main Chiller': {
                            'reference_capacity': 'Autosize',
                            'reference_cop': 6.1,
                            'cooling_capacity_function_of_temperature_curve_name': 'Main Chiller RecipCapFT',
                            'electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name': 'Main Chiller RecipEIRFPLR',
                            'electric_input_to_cooling_output_ratio_function_of_temperature_curve_name': 'Main Chiller RecipEIRFT',
                            'chilled_water_inlet_node_name': 'CHW In',
                            'chilled_water_outlet_node_name': 'CHW Out'
                        }
                    },
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Bad Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'HVACTemplate:Plant:Chiller:ObjectReference \(OR 1\) '
                                                               r'Referenced chiller not found')
        return

    def test_object_reference_chiller_no_chw_inlet_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Chiller:Electric:EIR": {
                        'Main Chiller': {
                            'reference_capacity': 'Autosize',
                            'reference_cop': 6.1,
                            'cooling_capacity_function_of_temperature_curve_name': 'Main Chiller RecipCapFT',
                            'electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name': 'Main Chiller RecipEIRFPLR',
                            'electric_input_to_cooling_output_ratio_function_of_temperature_curve_name': 'Main Chiller RecipEIRFT',
                            'chilled_water_inlet_node_name': '',
                            'chilled_water_outlet_node_name': 'CHW Out'
                        }
                    },
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Main Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Blank chilled water Inlet Node Name found in '
                                                               r'referenced chiller: ')
        return

    def test_object_reference_chiller_no_chw_outlet_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Chiller:Electric:EIR": {
                        'Main Chiller': {
                            'reference_capacity': 'Autosize',
                            'reference_cop': 6.1,
                            'cooling_capacity_function_of_temperature_curve_name': 'Main Chiller RecipCapFT',
                            'electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name': 'Main Chiller RecipEIRFPLR',
                            'electric_input_to_cooling_output_ratio_function_of_temperature_curve_name': 'Main Chiller RecipEIRFT',
                            'chilled_water_inlet_node_name': 'CHW In',
                            'chilled_water_outlet_node_name': 'None'
                        }
                    },
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Main Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Blank chilled water Outlet Node Name found in '
                                                               r'referenced chiller: ')
        return

    def test_object_reference_chiller_no_cw_inlet_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Chiller:Electric:EIR": {
                        'Main Chiller': {
                            'reference_capacity': 'Autosize',
                            'reference_cop': 6.1,
                            'cooling_capacity_function_of_temperature_curve_name': 'Main Chiller RecipCapFT',
                            'electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name': 'Main Chiller RecipEIRFPLR',
                            'electric_input_to_cooling_output_ratio_function_of_temperature_curve_name': 'Main Chiller RecipEIRFT',
                            'chilled_water_inlet_node_name': 'CHW In',
                            'chilled_water_outlet_node_name': 'CHW Out',
                            'condenser_outlet_node_name': 'CW Out'
                        }
                    },
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Main Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Blank condenser water Inlet Node Name')
        return

    def test_object_reference_chiller_no_cw_outlet_name(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Chiller:Electric:EIR": {
                        'Main Chiller': {
                            'reference_capacity': 'Autosize',
                            'reference_cop': 6.1,
                            'cooling_capacity_function_of_temperature_curve_name': 'Main Chiller RecipCapFT',
                            'electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name': 'Main Chiller RecipEIRFPLR',
                            'electric_input_to_cooling_output_ratio_function_of_temperature_curve_name': 'Main Chiller RecipEIRFT',
                            'chilled_water_inlet_node_name': 'CHW In',
                            'chilled_water_outlet_node_name': 'CHW Out',
                            'condenser_inlet_node_name': 'CW In'
                        }
                    },
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Main Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Blank condenser water Outlet Node Name')
        return

    def test_object_reference_chiller_duplicate_chw_nodes(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Chiller:Electric:EIR": {
                        'Main Chiller': {
                            'reference_capacity': 'Autosize',
                            'reference_cop': 6.1,
                            'cooling_capacity_function_of_temperature_curve_name': 'Main Chiller RecipCapFT',
                            'electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name': 'Main Chiller RecipEIRFPLR',
                            'electric_input_to_cooling_output_ratio_function_of_temperature_curve_name': 'Main Chiller RecipEIRFT',
                            'chilled_water_inlet_node_name': 'CHW In',
                            'chilled_water_outlet_node_name': 'CHW In',
                            'condenser_inlet_node_name': 'CW In',
                            'condenser_outlet_node_name': 'CW In'
                        }
                    },
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Main Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Duplicate chilled water node name found in '
                                                               r'referenced chiller')
        return

    def test_object_reference_chiller_duplicate_cw_nodes(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Chiller:Electric:EIR": {
                        'Main Chiller': {
                            'reference_capacity': 'Autosize',
                            'reference_cop': 6.1,
                            'cooling_capacity_function_of_temperature_curve_name': 'Main Chiller RecipCapFT',
                            'electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name': 'Main Chiller RecipEIRFPLR',
                            'electric_input_to_cooling_output_ratio_function_of_temperature_curve_name': 'Main Chiller RecipEIRFT',
                            'chilled_water_inlet_node_name': 'CHW In',
                            'chilled_water_outlet_node_name': 'CHW Out',
                            'condenser_inlet_node_name': 'CW In',
                            'condenser_outlet_node_name': 'CW In'
                        }
                    },
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Main Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Duplicate condenser water node name found in '
                                                               r'referenced chiller')
        return

    def test_object_reference_chiller_air_cooled(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Chiller:Electric:EIR": {
                        'Main Chiller': {
                            'reference_capacity': 'Autosize',
                            'reference_cop': 6.1,
                            'cooling_capacity_function_of_temperature_curve_name': 'Main Chiller RecipCapFT',
                            'electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name': 'Main Chiller RecipEIRFPLR',
                            'electric_input_to_cooling_output_ratio_function_of_temperature_curve_name': 'Main Chiller RecipEIRFT',
                            'chilled_water_inlet_node_name': 'CHW In',
                            'chilled_water_outlet_node_name': 'CHW Out',
                            'condenser_type': 'AirCooled'
                        }
                    },
                    "HVACTemplate:Plant:Chiller:ObjectReference": {
                        "OR 1": {
                            'chiller_name': 'Main Chiller',
                            'chiller_object_type': 'Chiller:Electric:EIR'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertNotRegex(output['Output:PreprocessorMessage'], r'Blank condenser water Inlet Node Name')
        return

    def test_tower_not_all_autosize(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    **chilled_water_objects,
                    'HVACTemplate:Plant:Tower': {
                        'Tower 1': {
                            'tower_type': 'SingleSpeed',
                            'high_speed_nominal_capacity': 'Autosize',
                            'free_convection_capacity': 200
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'For a SingleSpeed tower the high speed capacity and '
                                                               r'free convection capacity both need to be specified '
                                                               r'or set to autosize')
        return

    def test_object_reference_tower_no_type(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:Tower:ObjectReference": {
                        "OR 1": {
                            'cooling_tower_name': 'Main Tower',
                            'cooling_tower_object_type': 'CoolingTower:SingleSpeed'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'n HVACTemplate:Plant:Tower:ObjectReference \(OR 1\) '
                                                               r'Referenced tower not found')
        return

    def test_object_reference_tower_no_inlet(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'CoolingTower:SingleSpeed': {
                        'Main Tower': {
                            'design_air_flow_rate': 'Autosize',
                            'design_fan_power': 'Autosize',
                            'water_inlet_node_name': '',
                            'water_outlet_node_name': 'Out Node'
                        }
                    },
                    "HVACTemplate:Plant:Tower:ObjectReference": {
                        "OR 1": {
                            'cooling_tower_name': 'Main Tower',
                            'cooling_tower_object_type': 'CoolingTower:SingleSpeed'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Blank Inlet Node Name found')
        return

    def test_object_reference_tower_no_outlet(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'CoolingTower:SingleSpeed': {
                        'Main Tower': {
                            'design_air_flow_rate': 'Autosize',
                            'design_fan_power': 'Autosize',
                            'water_inlet_node_name': 'In Node',
                            'water_outlet_node_name': 'None'
                        }
                    },
                    "HVACTemplate:Plant:Tower:ObjectReference": {
                        "OR 1": {
                            'cooling_tower_name': 'Main Tower',
                            'cooling_tower_object_type': 'CoolingTower:SingleSpeed'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Blank Outlet Node Name found')
        return

    def test_object_reference_tower_duplicate_nodes(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    'CoolingTower:SingleSpeed': {
                        'Main Tower': {
                            'design_air_flow_rate': 'Autosize',
                            'design_fan_power': 'Autosize',
                            'water_inlet_node_name': 'In Node',
                            'water_outlet_node_name': 'In Node'
                        }
                    },
                    "HVACTemplate:Plant:Tower:ObjectReference": {
                        "OR 1": {
                            'cooling_tower_name': 'Main Tower',
                            'cooling_tower_object_type': 'CoolingTower:SingleSpeed'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Duplicate node name found')
        return

    def test_object_reference_chilled_water_loop_no_tower(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:ChilledWaterLoop": {
                        "Chilled Water Loop": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        }
                    },
                    "HVACTemplate:Plant:Chiller": {
                        "Main Chiller": {
                            "capacity": "Autosize",
                            "chiller_type": "ElectricReciprocatingChiller",
                            "condenser_type": "WaterCooled",
                            "nominal_cop": 3.2,
                            "priority": "1"
                        }
                    },
                    "HVACTemplate:System:VAV": {
                        "VAV Sys 1": {
                            "cooling_coil_design_setpoint": 12.8,
                            "cooling_coil_setpoint_reset_type": "None",
                            "cooling_coil_type": "ChilledWater",
                            "dehumidification_control_type": "None",
                            "dehumidification_setpoint": 60.0,
                            "economizer_lockout": "NoLockout",
                            "economizer_lower_temperature_limit": 4,
                            "economizer_type": "DifferentialDryBulb",
                            "economizer_upper_temperature_limit": 19,
                            "gas_heating_coil_efficiency": 0.8,
                            "gas_heating_coil_parasitic_electric_load": 0.0,
                            "gas_preheat_coil_efficiency": 0.8,
                            "gas_preheat_coil_parasitic_electric_load": 0.0,
                            "heat_recovery_type": "None",
                            "heating_coil_design_setpoint": 10.0,
                            "heating_coil_setpoint_reset_type": "None",
                            "heating_coil_type": "HotWater",
                            "humidifier_rated_capacity": 1e-06,
                            "humidifier_rated_electric_power": 2690.0,
                            "humidifier_setpoint": 30.0,
                            "humidifier_type": "None",
                            "latent_heat_recovery_effectiveness": 0.65,
                            "maximum_outdoor_air_flow_rate": "Autosize",
                            "minimum_outdoor_air_control_type": "FixedMinimum",
                            "minimum_outdoor_air_flow_rate": "Autosize",
                            "minimum_outdoor_air_schedule_name": "Min OA Sched",
                            "night_cycle_control": "CycleOnAny",
                            "preheat_coil_type": "None",
                            "return_plenum_name": "PLENUM-1",
                            "sensible_heat_recovery_effectiveness": 0.7,
                            "sizing_option": "NonCoincident",
                            "supply_fan_delta_pressure": 600,
                            "supply_fan_maximum_flow_rate": "Autosize",
                            "supply_fan_minimum_flow_rate": "Autosize",
                            "supply_fan_motor_efficiency": 0.9,
                            "supply_fan_motor_in_air_stream_fraction": 1,
                            "supply_fan_part_load_power_coefficients": "InletVaneDampers",
                            "supply_fan_placement": "DrawThrough",
                            "supply_fan_total_efficiency": 0.7,
                            "system_availability_schedule_name": "FanAvailSched"
                        }
                    },
                    "HVACTemplate:Zone:VAV": {
                        "HVACTemplate:Zone:VAV 1": {
                            "baseboard_heating_capacity": "Autosize",
                            "baseboard_heating_type": "None",
                            "constant_minimum_air_flow_fraction": 0.3,
                            "damper_heating_action": "Reverse",
                            "outdoor_air_flow_rate_per_person": 0.00944,
                            "outdoor_air_flow_rate_per_zone": 0.0,
                            "outdoor_air_flow_rate_per_zone_floor_area": 0.0,
                            "outdoor_air_method": "Flow/Person",
                            "reheat_coil_type": "HotWater",
                            "supply_air_maximum_flow_rate": "Autosize",
                            "template_thermostat_name": "All Zones",
                            "template_vav_system_name": "VAV Sys 1",
                            "zone_cooling_design_supply_air_temperature_input_method": "SystemSupplyAirTemperature",
                            "zone_heating_design_supply_air_temperature": 50.0,
                            "zone_heating_design_supply_air_temperature_input_method": "SupplyAirTemperature",
                            "zone_minimum_air_flow_input_method": "Constant",
                            "zone_name": "SPACE1-1"
                        }
                    },
                    "HVACTemplate:Thermostat": {
                        "All Zones": {
                            "cooling_setpoint_schedule_name": "Clg-SetP-Sch",
                            "heating_setpoint_schedule_name": "Htg-SetP-Sch"
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'in HVACTemplate:Plant:CondenserWaterLoop '
                                                               r'\(Condenser Water Loop\)\. There is no supply-side '
                                                               r'equipment serving this loop')
        return

    def test_wahp_autosize_cooling(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:WaterToAirHeatPump": {
                        "WAHP 1": {
                            'zone_name': 'SPACE1-1',
                            'cooling_coil_gross_rated_total_capacity': 'Autosize',
                            'cooling_coil_gross_rated_sensible_heat_ratio': 0.65,
                            'template_thermostat_name': 'All Zones'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Cooling Coil Rated Capacity is autosized, so the '
                                                               r'Cooling Coil Gross Rated Sensible')
        return

    def test_wahp_autosize_shr(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:WaterToAirHeatPump": {
                        "WAHP 1": {
                            'zone_name': 'SPACE1-1',
                            'cooling_coil_gross_rated_total_capacity': 1000,
                            'cooling_coil_gross_rated_sensible_heat_ratio': 'Autosize',
                            'template_thermostat_name': 'All Zones'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Cooling Coil Rated Capacity will not be used when '
                                                               r'the Cooling Coil Gross Rated Sensible Heat Ratio '
                                                               r'is autosized')
        return

    def test_hot_water_and_mixed_water_loop(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Plant:HotWaterLoop": {
                        "Hot Water Loop": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        }
                    },
                    'HVACTemplate:Plant:MixedWaterLoop': {
                        'MWL 1': {}
                    },
                    'HVACTemplate:System:VAV': {
                        'Sys 1': {}
                    },
                    'HVACTemplate:System:VRF': {
                        'Sys 1': {}
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'VACTemplate:Plant:HotWaterLoop is also present\.  '
                                                               r'All boilers with blank Template Loop Type field will '
                                                               r'be connected')
        return

    def test_doas_humid_control_multimode(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:PTAC": {
                        "HVACTemplate:Zone:PTAC 1": {
                            "capacity_control_method": "None",
                            "cooling_coil_gross_rated_cooling_cop": 3,
                            "cooling_coil_gross_rated_sensible_heat_ratio": "Autosize",
                            "cooling_coil_gross_rated_total_capacity": "Autosize",
                            "cooling_coil_type": "SingleSpeedDX",
                            "cooling_supply_air_flow_rate": "Autosize",
                            "dedicated_outdoor_air_system_name": "CV Sys 1",
                            "gas_heating_coil_efficiency": 0.8,
                            "heating_coil_capacity": "Autosize",
                            "heating_coil_type": "Electric",
                            "heating_supply_air_flow_rate": "Autosize",
                            "outdoor_air_flow_rate_per_person": 0.00944,
                            "outdoor_air_method": "Flow/Person",
                            "supply_fan_delta_pressure": 75,
                            "supply_fan_motor_efficiency": 0.9,
                            "supply_fan_placement": "DrawThrough",
                            "supply_fan_total_efficiency": 0.7,
                            "template_thermostat_name": "All Zones",
                            "zone_cooling_design_supply_air_temperature": 14.0,
                            "zone_cooling_design_supply_air_temperature_input_method": "SupplyAirTemperature",
                            "zone_heating_design_supply_air_temperature": 50.0,
                            "zone_heating_design_supply_air_temperature_input_method": "SupplyAirTemperature",
                            "zone_name": "SPACE1-1"
                        }
                    },
                    "HVACTemplate:System:DedicatedOutdoorAir": {
                        "CV Sys 1": {
                            'cooling_coil_type': 'TwoStageHumidityControlDX',
                            'dehumidification_control_type': 'Multimode',
                            'heating_coil_type': 'None'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'the Dehumidification Control Type field=Multimode')
        return

    def test_doas_humid_control_no_heating(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    **chilled_water_objects,
                    "HVACTemplate:Zone:PTAC": {
                        'PTAC 1': {
                            'dedicated_outdoor_air_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:DedicatedOutdoorAir": {
                        "CV Sys 1": {
                            'cooling_coil_type': 'TwoStageHumidityControlDX',
                            'dehumidification_control_type': 'Multimode',
                            'heating_coil_type': 'None'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'there is no heating coil in this system to provide '
                                                               r'reheat\. Cold supply temps may result')
        return

    def test_doas_heat_recovery_no_heating(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:PTAC": {
                        'PTAC 1': {
                            'dedicated_outdoor_air_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:DedicatedOutdoorAir": {
                        "CV Sys 1": {
                            'cooling_coil_type': 'TwoStageHumidityControlDX',
                            'heat_recovery_type': 'Sensible',
                            'heating_coil_type': 'None'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'there is heat recovery with no heating coil\. The heat '
                                                               r'recovery heating mode will be controlled')
        return

    def test_no_schema_warning(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "HVACTemplate:Zone:PTAC": {
                        'PTAC 1': {
                            'dedicated_outdoor_air_system_name': 'CV Sys 1',
                            'zone_name': 'SPACE1-1',
                            'template_thermostat_name': 'All Zones'
                        }
                    },
                    "HVACTemplate:System:DedicatedOutdoorAir": {
                        "CV Sys 1": {
                            'cooling_coil_type': 'TwoStageHumidityControlDX',
                            'heat_recovery_type': 'Sensible',
                            'heating_coil_type': 'None'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=True
                )
            )
        self.assertRegex(output['Output:PreprocessorMessage'], r'Schema validation has been turned off')
        return
