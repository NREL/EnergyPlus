name: Releases

on:
  push:
    tags:
      - '*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BUILD_TYPE: Release

jobs:
  release:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_failure }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        build_name: [Windows_x64, Windows_x86, Ubuntu_18.04, Ubuntu_20.04, macOS_10.15]
        include:
        - build_name: Windows_x64
          os: windows-2019
          arch: x64
          allow_failure: false
          CMAKE_GENERATOR_PLATFORM: x64
          package-arch: x86_64
          BINARY_EXT: exe
          COMPRESSED_EXT: zip
          QT_OS_NAME: windows
        - build_name: Windows_x86
          os: windows-2019
          arch: x86
          allow_failure: false
          CMAKE_GENERATOR_PLATFORM: Win32
          package-arch: i386
          BINARY_EXT: exe
          COMPRESSED_EXT: zip
          QT_OS_NAME: windows
        - build_name: Ubuntu_18.04
          os: ubuntu-18.04
          arch: x64
          allow_failure: false
          package-arch: x86_64
          BINARY_EXT: run
          COMPRESSED_EXT: tar.gz
          SH_EXT: sh
          QT_OS_NAME: linux
        - build_name: Ubuntu_20.04
          os: ubuntu-20.04
          arch: x64
          allow_failure: false
          package-arch: x86_64
          BINARY_EXT: run
          COMPRESSED_EXT: tar.gz
          SH_EXT: sh
          QT_OS_NAME: linux
        - build_name: macOS_10.15
          os: macos-10.15
          arch: x64
          allow_failure: false
          package-arch: x86_64
          BINARY_EXT: dmg
          COMPRESSED_EXT: tar.gz
          SH_EXT: sh
          QT_OS_NAME: mac
          MACOSX_DEPLOYMENT_TARGET: 10.15
          SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: ${{ matrix.arch }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aqtinstall

    - name: Install System dependencies and LaTeX
      shell: bash
      run: |
        set -x
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "Using Apt to install dependencies"
          sudo apt update
          sudo apt install texlive texlive-xetex texlive-science libxkbcommon-x11-0 xorg-dev libgl1-mesa-dev

        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "Setting up MACOSX_DEPLOYMENT_TARGET and SDKROOT"
          echo MACOSX_DEPLOYMENT_TARGET=${{ matrix.MACOSX_DEPLOYMENT_TARGET }} >> $GITHUB_ENV
          echo SDKROOT=${{ matrix.SDKROOT }} >> $GITHUB_ENV
          # The MACOSX_DEPLOYMENT_TARGET environment variable sets the default value for the CMAKE_OSX_DEPLOYMENT_TARGET variable.
          # echo CMAKE_MACOSX_DEPLOYMENT_TARGET='-DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET' >> $GITHUB_ENV

          echo "Using brew to install mactex and adding it to PATH"
          brew cask install mactex
          echo "/Library/TeX/texbin" >> $GITHUB_PATH

          echo "Setting FC (fortran compiler)"
          echo FC=/usr/local/bin/gfortran-9 >> $GITHUB_ENV

        elif [ "$RUNNER_OS" == "Windows" ]; then

          echo "Setting CMAKE_GENERATOR options equivalent to ='-G \"Visual Studio 16 2019\" -A ${{ matrix.CMAKE_GENERATOR_PLATFORM }}'"
          echo CMAKE_GENERATOR='Visual Studio 16 2019' >> $GITHUB_ENV
          echo CMAKE_GENERATOR_PLATFORM=${{ matrix.CMAKE_GENERATOR_PLATFORM }} >> $GITHUB_ENV

          # echo FC="C:/msys64/mingw64/bin/x86_64-w64-mingw32-gfortran.exe" >> $GITHUB_ENV

          echo "Downloading MiKTeX CLI installer"
          # We download from a specific miror already
          curl -L -O https://ctan.math.illinois.edu/systems/win32/miktex/setup/windows-x64/miktexsetup-4.0-x64.zip
          unzip miktexsetup-4.0-x64.zip

          echo "Setting up the local package directory via download"
          ./miktexsetup --verbose \
              --local-package-repository=C:/ProgramData/MiKTeX-Repo \
              --remote-package-repository="https://ctan.math.illinois.edu/systems/win32/miktex/tm/packages/" \
              --package-set=basic \
              download

          echo "Installing from the local package directory previously set up"
          ./miktexsetup --verbose \
              --local-package-repository=C:/ProgramData/MiKTeX-Repo \
              --package-set=basic \
              --shared \
              install

          echo "Adding MiKTeX bin folder to PATH and to GITHUB_PATH"
          echo "C:/Program Files/MiKTeX/miktex/bin/x64/" >> $GITHUB_PATH
          export PATH="/c/Program Files/MiKTeX/miktex/bin/x64/:$PATH"

          echo "Configuring MiKTeX to install missing packages on the fly"
          initexmf --admin --verbose --set-config-value='[MPM]AutoInstall=1'

          echo "Configure default mirror for packages"
          mpm --admin --set-repository="https://ctan.math.illinois.edu/systems/win32/miktex/tm/packages/"
          # Avoid annoying warning: "xelatex: major issue: So far, you have not checked for updates as a MiKTeX user."
          mpm --find-updates
          mpm --admin --find-updates
        fi;

    #- name: Build Test Document (will install missing packages)
      #working-directory: ./doc/test
      #shell: bash
      #run: |
        #set -x
        #xelatex dependencies.tex

    - name: Install IFW
      shell: bash
      run: |
        set -x
        out_dir=${{ runner.workspace }}/Qt
        if [ "$RUNNER_OS" == "Windows" ]; then
          out_dir="C:/Qt"
        fi;

        aqt tool ${{ matrix.QT_OS_NAME }} tools_ifw 3.2.2 qt.tools.ifw.32 --outputdir="$out_dir"
        echo "$out_dir/Tools/QtInstallerFramework/3.2/bin" >> $GITHUB_PATH

    - name: Create Build Directory
      run: cmake -E make_directory ./build/

    - name: Configure CMake
      working-directory: ./build
      shell: bash
      run: |
        set -x
        cmake -DLINK_WITH_PYTHON=ON -DBUILD_FORTRAN=ON -DBUILD_PACKAGE:BOOL=ON \
              -DDOCUMENTATION_BUILD="BuildWithAll" -DTEX_INTERACTION="batchmode" \
              ../

    - name: Build Package
      working-directory: ./build
      shell: bash
      run: cmake --build . --target package -j 2 --config $BUILD_TYPE

    - name: Upload Zip to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/EnergyPlus-*-${{ matrix.package-arch }}.${{ matrix.COMPRESSED_EXT }}
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

    - name: Upload IFW to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/EnergyPlus-*-${{ matrix.package-arch }}.${{ matrix.BINARY_EXT }}
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

    - name: Upload SH to release
      if: runner.os == 'Linux'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/EnergyPlus-*-${{ matrix.package-arch }}.${{ matrix.SH_EXT }}
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

